<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>tcptty</title>
    <subtitle></subtitle>
    <updated>2023-05-23T07:02:14.925175Z</updated>
    <id>/knowledge</id>
    <link href="/knowledge/feed.xml" rel="self" type="application/atom+xml" />
    <link href="/knowledge" rel="alternate" type="text/html" />
    <generator uri="https://github.com/zineland/zine" version="0.15.0">zine</generator>
    <author>
        <name>tcptty</name>
        <uri>/knowledge</uri>
    </author>

    <entry>
        <title>文件换行符</title>
        <link rel="alternate" href="/knowledge/issue-1/file_line_ending" type="text/html" title="文件换行符" />
        <published>2018-06-17T00:00:00+00:00</published>
        <updated>2018-06-17T00:00:00+00:00</updated>
        <id>/knowledge/issue-1/file_line_ending</id>
        <content type="html" xml:base="/knowledge/issue-1/file_line_ending">
            <![CDATA[<p>在不同平台间使用FTP软件传送文件时, 在ascii文本模式传输模式下, 一些FTP客户端程序会自动对换行格式进行转换. 经过这种传输的文件字节数可能会发生变化. 如果你不想ftp修改原文件, 可以使用bin模式(二进制模式)传输文本.</p>
<p>The line terminator expected for each file format is:</p>
<ul>
<li>unix	LF only (each line ends with an LF character).	Unix based systems and Mac OS X and later.</li>
<li>dos	CRLF (each line ends with CR then LF).	DOS and Windows.</li>
<li>mac	CR only (each line ends with a CR character).	Mac OS version 9 and earlier</li>
</ul>
<p>CR is carriage return (return cursor to left margin), which is Ctrl-M or ^M or hex 0D.</p>
<p>LF is linefeed (move cursor down), which is Ctrl-J or ^J or hex 0A. Sometimes, LF is written as NL (newline).</p>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    <entry>
        <title>Nginx Basic 认证</title>
        <link rel="alternate" href="/knowledge/issue-1/nginx_basic_auth" type="text/html" title="Nginx Basic 认证" />
        <published>2018-06-16T00:00:00+00:00</published>
        <updated>2018-06-16T00:00:00+00:00</updated>
        <id>/knowledge/issue-1/nginx_basic_auth</id>
        <content type="html" xml:base="/knowledge/issue-1/nginx_basic_auth">
            <![CDATA[<p>from http://www.xiaoten.com/nginx-user-authentication-configuration.html</p>
<p><code>ngx_http_auth_basic_module</code>模块实现让访问者只有输入正确的用户密码才允许访问web内容。web上的一些内容不想被其他人知道，但是又想让部分人看到。nginx的http auth模块以及Apache http auth都是很好的解决方案。</p>
<p>默认情况下nginx已经安装了<code>ngx_http_auth_basic_module</code>模块，如果不需要这个模块，可以加上 <code>-without-http_auth_basic_module</code>。</p>
<h2 id="auth_basic指令" class="toc-item group scroll-mt-20">
    auth_basic指令
    <a href="#auth_basic指令" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>语法: auth_basic string | off;</p>
<p>默认值: auth_basic off;</p>
<p>配置段: http, server, location, limit_except</p>
<p>默认表示不开启认证，后面如果跟上字符，这些字符会在弹窗中显示。</p>
<p>语法: auth_basic_user_file file;</p>
<p>默认值: —</p>
<p>配置段: http, server, location, limit_except</p>
<p>用户密码文件，文件内容类似如下：</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">testuser1:password1
</span><span style="color:#f8f8f2;">testuser2:password2:comment
</span><span style="color:#f8f8f2;">
</span></pre>
<h2 id="认证实例" class="toc-item group scroll-mt-20">
    认证实例
    <a href="#认证实例" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><pre style="background-color:#272822;">
<span style="color:#f8f8f2;">server{
</span><span style="color:#f8f8f2;">    server_name  www.yoursite.com yoursite.com;
</span><span style="color:#f8f8f2;"> 
</span><span style="color:#f8f8f2;">    index index.html index.php;
</span><span style="color:#f8f8f2;">    root /data/site/www.yoursite.com;       
</span><span style="color:#f8f8f2;"> 
</span><span style="color:#f8f8f2;">    location /
</span><span style="color:#f8f8f2;">    {
</span><span style="color:#f8f8f2;">      auth_basic &quot;nginx basic http test for yoursite.com&quot;;
</span><span style="color:#f8f8f2;">      auth_basic_user_file conf/htpasswd; 
</span><span style="color:#f8f8f2;">      autoindex on;
</span><span style="color:#f8f8f2;">    }
</span><span style="color:#f8f8f2;">}
</span></pre>
<p>备注：<code>一定要注意auth_basic_user_file路径，否则会不厌其烦的出现403</code>。</p>
<h2 id="生成密码" class="toc-item group scroll-mt-20">
    生成密码
    <a href="#生成密码" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>可以使用htpasswd，或者使用openssl</p>
<pre style="background-color:#272822;">
<span style="color:#66d9ef;">printf </span><span style="color:#e6db74;">&quot;test:$(openssl passwd</span><span style="font-style:italic;color:#fd971f;"> -crypt</span><span style="color:#e6db74;"> 123456)\n&quot; </span><span style="color:#f92672;">&gt;&gt;</span><span style="color:#f8f8f2;"> conf/htpasswd
</span><span style="color:#f8f8f2;">cat conf/htpasswd 
</span><span style="color:#f8f8f2;">test:xyJkVhXGAZ8tM
</span><span style="color:#f8f8f2;">
</span></pre>
<p>账号：test
密码：123456</p>
<h2 id="重启-nginx" class="toc-item group scroll-mt-20">
    重启 nginx
    <a href="#重启-nginx" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><pre style="background-color:#272822;">
<span style="color:#f8f8f2;"># /usr/local/nginx-1.12.2/sbin/nginx -s reload
</span></pre>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    <entry>
        <title>UML类图关系</title>
        <link rel="alternate" href="/knowledge/issue-1/uml_class_diagram_relationships" type="text/html" title="UML类图关系" />
        <published>2018-06-15T00:00:00+00:00</published>
        <updated>2018-06-15T00:00:00+00:00</updated>
        <id>/knowledge/issue-1/uml_class_diagram_relationships</id>
        <content type="html" xml:base="/knowledge/issue-1/uml_class_diagram_relationships">
            <![CDATA[<p>ref: <a href="http://blog.csdn.net/tianhai110/article/details/6339565">http://blog.csdn.net/tianhai110/article/details/6339565</a></p>
<p>在UML类图中，常见的有以下几种关系:</p>
<ul>
<li>泛化 (Generalization)</li>
<li>实现 (Realization)</li>
<li>关联 (Association)</li>
<li>聚合 (Aggregation)</li>
<li>组合 (Composition)</li>
<li>依赖 (Dependency)</li>
</ul>
<h2 id="泛化" class="toc-item group scroll-mt-20">
    泛化
    <a href="#泛化" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>【泛化关系】：是一种继承关系,它指定了子类如何特化父类的所有特征和行为例如：老虎是动物的一种.</p>
<p>【箭头指向】：带三角箭头的实线，箭头指向父类</p>
<p><img src="/static/img/doc/generalization.gif" alt="Generalization" title="" loading="lazy"></p>
<h2 id="实现" class="toc-item group scroll-mt-20">
    实现
    <a href="#实现" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现</p>
<p>【箭头指向】：带三角箭头的虚线，箭头指向接口</p>
<p><img src="/static/img/doc/realization.gif" alt="Realization" title="" loading="lazy"></p>
<h2 id="关联" class="toc-item group scroll-mt-20">
    关联
    <a href="#关联" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>【关联关系】：是一种拥有的关系,它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子</p>
<p>关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带普通箭头的实心线，指向被拥有者</p>
<p><img src="/static/img/doc/association.gif" alt="Association" title="" loading="lazy"></p>
<p>上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。</p>
<p><img src="/static/img/doc/association2.gif" alt="Association2" title="" loading="lazy"></p>
<p>上图为自身关联</p>
<h2 id="聚合" class="toc-item group scroll-mt-20">
    聚合
    <a href="#聚合" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>【聚合关系】：是整体与部分的关系.如车和轮胎是整体和部分的关系.</p>
<p>聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带空心菱形的实心线，菱形指向整体</p>
<p><img src="/static/img/doc/aggregation.gif" alt="Aggregation" title="" loading="lazy"></p>
<h2 id="组合" class="toc-item group scroll-mt-20">
    组合
    <a href="#组合" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>【组合关系】：是整体与部分的关系.,没有公司就不存在部门      组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p>
<p><img src="/static/img/doc/composition.gif" alt="Composition" title="" loading="lazy"></p>
<h2 id="依赖" class="toc-item group scroll-mt-20">
    依赖
    <a href="#依赖" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>【依赖关系】：是一种使用的关系,所以要尽量不使用双向的互相依赖。</p>
<p>【代码表现】：局部变量、方法的参数或者对静态方法的调用</p>
<p>【箭头及指向】：带箭头的虚线，指向被使用者</p>
<p><img src="/static/img/doc/dependency.gif" alt="Dependency" title="" loading="lazy"></p>
<h2 id="强弱顺序" class="toc-item group scroll-mt-20">
    强弱顺序
    <a href="#强弱顺序" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p><code>泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</code></p>
<h2 id="总示例图" class="toc-item group scroll-mt-20">
    总示例图
    <a href="#总示例图" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>下面这张UML图，比较形象地展示了各种类图关系：</p>
<p><img src="/static/img/doc/summary.gif" alt="summary" title="" loading="lazy"></p>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    <entry>
        <title>awk 命令</title>
        <link rel="alternate" href="/knowledge/linux/linux_awk_usage" type="text/html" title="awk 命令" />
        <published>2018-06-15T00:00:00+00:00</published>
        <updated>2018-06-15T00:00:00+00:00</updated>
        <id>/knowledge/linux/linux_awk_usage</id>
        <content type="html" xml:base="/knowledge/linux/linux_awk_usage">
            <![CDATA[<p>from https://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html</p>
<h2 id="简介" class="toc-item group scroll-mt-20">
    简介
    <a href="#简介" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>
<p>awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。</p>
<p>awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。</p>
<h2 id="使用方法" class="toc-item group scroll-mt-20">
    使用方法
    <a href="#使用方法" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><pre style="background-color:#272822;">
<span style="color:#f8f8f2;">awk </span><span style="color:#e6db74;">&#39;{pattern + action}&#39; </span><span style="color:#f8f8f2;">{filenames}
</span></pre>
<p>尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</p>
<p>awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。</p>
<p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p>
<h2 id="调用awk" class="toc-item group scroll-mt-20">
    调用awk
    <a href="#调用awk" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>有三种方式调用awk</p>
<p>1.命令行方式</p>
<p><code>awk [-F  field-separator]  'commands'  input-file(s)</code></p>
<p>其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。
在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。</p>
<p>2.shell脚本方式</p>
<p>将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。
相当于shell脚本首行的：<code>#!/bin/sh</code>
可以换成：<code>#!/bin/awk</code></p>
<p>3.将所有的awk命令插入一个单独文件，然后调用：</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">awk</span><span style="font-style:italic;color:#fd971f;"> -f</span><span style="color:#f8f8f2;"> awk-script-file input-file(s)
</span></pre>
<p>其中，<code>-f</code>选项加载<code>awk-script-file</code>中的awk脚本，<code>input-file(s)</code>跟上面的是一样的。</p>
<p>本章重点介绍命令行方式。</p>
<h2 id="入门实例" class="toc-item group scroll-mt-20">
    入门实例
    <a href="#入门实例" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>假设last -n 5的输出如下</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">last</span><span style="font-style:italic;color:#fd971f;"> -n</span><span style="color:#f8f8f2;"> 5 </span><span style="color:#f92672;">&lt;</span><span style="color:#f8f8f2;">==仅取出前五行
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">root     pts/1   192.168.1.100  Tue Feb 10 11:21   still logged in
</span><span style="color:#f8f8f2;">root     pts/1   192.168.1.100  Tue Feb 10 00:46 - 02:28  (01:41)
</span><span style="color:#f8f8f2;">root     pts/1   192.168.1.100  Mon Feb  9 11:41 - 18:30  (06:48)
</span><span style="color:#f8f8f2;">dmtsai   pts/1   192.168.1.100  Mon Feb  9 11:41 - 11:41  (00:00)
</span><span style="color:#f8f8f2;">root     tty1                   Fri Sep  5 14:09 - 14:10  (00:01)
</span></pre>
<p>如果只是显示最近登录的5个帐号</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">last</span><span style="font-style:italic;color:#fd971f;"> -n</span><span style="color:#f8f8f2;"> 5 </span><span style="color:#f92672;">| </span><span style="color:#f8f8f2;">awk  </span><span style="color:#e6db74;">&#39;{print $1}&#39;
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">root
</span><span style="color:#f8f8f2;">root
</span><span style="color:#f8f8f2;">root
</span><span style="color:#f8f8f2;">dmtsai
</span><span style="color:#f8f8f2;">root
</span></pre>
<p>awk工作流程是这样的：读入有’\n’换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是“空白键“ 或 “[tab]键”,所以$1表示登录用户，$3表示登录用户ip,以此类推。</p>
<p>如果只是显示/etc/passwd的账户</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">cat /etc/passwd </span><span style="color:#f92672;">|</span><span style="color:#f8f8f2;">awk</span><span style="font-style:italic;color:#fd971f;">  -F </span><span style="color:#e6db74;">&#39;:&#39;  &#39;{print $1}&#39;  
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">root
</span><span style="color:#f8f8f2;">daemon
</span><span style="color:#f8f8f2;">bin
</span><span style="color:#f8f8f2;">sys
</span></pre>
<p>这种是awk+action的示例，每行都会执行 action <code>{print $1}</code>。</p>
<p>-F指定域分隔符为’:’。</p>
<p>如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">cat /etc/passwd </span><span style="color:#f92672;">|</span><span style="color:#f8f8f2;">awk</span><span style="font-style:italic;color:#fd971f;">  -F </span><span style="color:#e6db74;">&#39;:&#39;  &#39;{print $1&quot;\t&quot;$7}&#39;
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">root    /bin/bash
</span><span style="color:#f8f8f2;">daemon  /bin/sh
</span><span style="color:#f8f8f2;">bin     /bin/sh
</span><span style="color:#f8f8f2;">sys     /bin/sh
</span></pre>
<p>如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加“blue,/bin/nosh“。</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">cat /etc/passwd </span><span style="color:#f92672;">|</span><span style="color:#f8f8f2;">awk</span><span style="font-style:italic;color:#fd971f;">  -F </span><span style="color:#e6db74;">&#39;:&#39;  &#39;BEGIN {print &quot;name,shell&quot;}  {print $1&quot;,&quot;$7} END {print &quot;blue,/bin/nosh&quot;}&#39;
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">name,shell
</span><span style="color:#f8f8f2;">root,/bin/bash
</span><span style="color:#f8f8f2;">daemon,/bin/sh
</span><span style="color:#f8f8f2;">bin,/bin/sh
</span><span style="color:#f8f8f2;">sys,/bin/sh
</span><span style="color:#f8f8f2;">....
</span><span style="color:#f8f8f2;">blue,/bin/nosh
</span></pre>
<p>awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</p>
<p>搜索/etc/passwd有root关键字的所有行</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">awk</span><span style="font-style:italic;color:#fd971f;"> -F</span><span style="color:#f8f8f2;">: </span><span style="color:#e6db74;">&#39;/root/&#39;</span><span style="color:#f8f8f2;"> /etc/passwd
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">root:x:0:0:root:/root:/bin/bash
</span></pre>
<p>这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。</p>
<p>搜索支持正则，例如找root开头的: <code>awk -F: '/^root/' /etc/passwd</code></p>
<p>搜索/etc/passwd有root关键字的所有行，并显示对应的shell</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">awk</span><span style="font-style:italic;color:#fd971f;"> -F</span><span style="color:#f8f8f2;">: </span><span style="color:#e6db74;">&#39;/root/{print $7}&#39;</span><span style="color:#f8f8f2;"> /etc/passwd 
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">/bin/bash
</span></pre>
<p>这里指定了 action <code>{print $7}</code></p>
<h2 id="awk内置变量" class="toc-item group scroll-mt-20">
    awk内置变量
    <a href="#awk内置变量" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">ARGC               命令行参数个数
</span><span style="color:#f8f8f2;">ARGV               命令行参数排列
</span><span style="color:#f8f8f2;">ENVIRON            支持队列中系统环境变量的使用
</span><span style="color:#f8f8f2;">FILENAME           awk浏览的文件名
</span><span style="color:#f8f8f2;">FNR                浏览文件的记录数
</span><span style="color:#f8f8f2;">FS                 设置输入域分隔符，等价于命令行 -F选项
</span><span style="color:#f8f8f2;">NF                 浏览记录的域的个数
</span><span style="color:#f8f8f2;">NR                 已读的记录数
</span><span style="color:#f8f8f2;">OFS                输出域分隔符
</span><span style="color:#f8f8f2;">ORS                输出记录分隔符
</span><span style="color:#f8f8f2;">RS                 控制记录分隔符
</span></pre>
<p>此外,$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,……以此类推。</p>
<p>统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">awk</span><span style="font-style:italic;color:#fd971f;">  -F </span><span style="color:#e6db74;">&#39;:&#39;  &#39;{print &quot;filename:&quot; FILENAME &quot;,linenumber:&quot; NR &quot;,columns:&quot; NF &quot;,linecontent:&quot;$0}&#39;</span><span style="color:#f8f8f2;"> /etc/passwd
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">filename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash
</span><span style="color:#f8f8f2;">filename:/etc/passwd,linenumber:2,columns:7,linecontent:daemon:x:1:1:daemon:/usr/sbin:/bin/sh
</span><span style="color:#f8f8f2;">filename:/etc/passwd,linenumber:3,columns:7,linecontent:bin:x:2:2:bin:/bin:/bin/sh
</span><span style="color:#f8f8f2;">filename:/etc/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev:/bin/sh
</span></pre>
<p>使用printf替代print,可以让代码更加简洁，易读</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">awk</span><span style="font-style:italic;color:#fd971f;">  -F </span><span style="color:#e6db74;">&#39;:&#39;  &#39;{printf(&quot;filename:%10s,linenumber:%s,columns:%s,linecontent:%s\n&quot;,FILENAME,NR,NF,$0)}&#39;</span><span style="color:#f8f8f2;"> /etc/passwd
</span></pre>
<h2 id="print和printf" class="toc-item group scroll-mt-20">
    print和printf
    <a href="#print和printf" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>awk中同时提供了print和printf两种打印输出的函数。</p>
<p>其中print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。</p>
<p>printf函数，其用法和c语言中printf基本相似,可以格式化字符串,输出复杂时，printf更加好用，代码更易懂。</p>
<h2 id="awk编程" class="toc-item group scroll-mt-20">
    awk编程
    <a href="#awk编程" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><h3 id="变量和赋值" class="toc-item group scroll-mt-20">
    变量和赋值
    <a href="#变量和赋值" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>除了awk的内置变量，awk还可以自定义变量。</p>
<p>下面统计/etc/passwd的账户人数</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">awk </span><span style="color:#e6db74;">&#39;{count++;print $0;} END{print &quot;user count is &quot;, count}&#39;</span><span style="color:#f8f8f2;"> /etc/passwd
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">root:x:0:0:root:/root:/bin/bash
</span><span style="color:#f8f8f2;">......
</span><span style="color:#f8f8f2;">user count is  40
</span></pre>
<p>count是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。</p>
<p>这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">awk </span><span style="color:#e6db74;">&#39;BEGIN {count=0;print &quot;[start]user count is &quot;, count} {count=count+1;print $0;} END{print &quot;[end]user count is &quot;, count}&#39;</span><span style="color:#f8f8f2;"> /etc/passwd
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">[start]user count is  0
</span><span style="color:#f8f8f2;">root:x:0:0:root:/root:/bin/bash
</span><span style="color:#f8f8f2;">...
</span><span style="color:#f8f8f2;">[end]user count is  40
</span></pre>
<p>统计某个文件夹下的文件占用的字节数</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">ls</span><span style="font-style:italic;color:#fd971f;"> -l </span><span style="color:#f92672;">|</span><span style="color:#f8f8f2;">awk </span><span style="color:#e6db74;">&#39;BEGIN {size=0;} {size=size+$5;} END{print &quot;[end]size is &quot;, size}&#39;
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">[end]size is  8657198
</span></pre>
<p>如果以M为单位显示:</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">ls</span><span style="font-style:italic;color:#fd971f;"> -l </span><span style="color:#f92672;">|</span><span style="color:#f8f8f2;">awk </span><span style="color:#e6db74;">&#39;BEGIN {size=0;} {size=size+$5;} END{print &quot;[end]size is &quot;, size/1024/1024,&quot;M&quot;}&#39; 
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">[end]size is  8.25889 M
</span></pre>
<p>注意，统计不包括文件夹的子目录。</p>
<h3 id="条件语句" class="toc-item group scroll-mt-20">
    条件语句
    <a href="#条件语句" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>awk中的条件语句是从C语言中借鉴来的，见如下声明方式：</p>
<pre style="background-color:#272822;">
<span style="color:#f92672;">if </span><span style="color:#f8f8f2;">(expression) {
</span><span style="color:#f8f8f2;">    statement;
</span><span style="color:#f8f8f2;">    statement;
</span><span style="color:#f8f8f2;">    ... ...
</span><span style="color:#f8f8f2;">}
</span><span style="color:#f8f8f2;">
</span><span style="color:#f92672;">if </span><span style="color:#f8f8f2;">(expression) {
</span><span style="color:#f8f8f2;">    statement;
</span><span style="color:#f8f8f2;">} else {
</span><span style="color:#f8f8f2;">    statement2;
</span><span style="color:#f8f8f2;">}
</span><span style="color:#f8f8f2;">
</span><span style="color:#f92672;">if </span><span style="color:#f8f8f2;">(expression) {
</span><span style="color:#f8f8f2;">    statement1;
</span><span style="color:#f8f8f2;">} else if (expression1) {
</span><span style="color:#f8f8f2;">    statement2</span><span style="color:#f92672;">;
</span><span style="color:#f8f8f2;">} else {
</span><span style="color:#f8f8f2;">    statement3;
</span><span style="color:#f8f8f2;">}
</span></pre>
<p>统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">ls</span><span style="font-style:italic;color:#fd971f;"> -l </span><span style="color:#f92672;">|</span><span style="color:#f8f8f2;">awk </span><span style="color:#e6db74;">&#39;BEGIN {size=0;print &quot;[start]size is &quot;, size} {if($5!=4096){size=size+$5;}} END{print &quot;[end]size is &quot;, size/1024/1024,&quot;M&quot;}&#39; 
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">[end]size is  8.22339 M
</span></pre>
<h3 id="循环语句" class="toc-item group scroll-mt-20">
    循环语句
    <a href="#循环语句" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。</p>
<h3 id="数组" class="toc-item group scroll-mt-20">
    数组
    <a href="#数组" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。</p>
<p>显示/etc/passwd的账户</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">awk</span><span style="font-style:italic;color:#fd971f;"> -F </span><span style="color:#e6db74;">&#39;:&#39; &#39;BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i &lt; NR; i++) print i, name[i]}&#39;</span><span style="color:#f8f8f2;"> /etc/passwd
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">0 root
</span><span style="color:#f8f8f2;">1 daemon
</span><span style="color:#f8f8f2;">2 bin
</span><span style="color:#f8f8f2;">3 sys
</span><span style="color:#f8f8f2;">4 sync
</span><span style="color:#f8f8f2;">5 games
</span><span style="color:#f8f8f2;">......
</span></pre>
<p>这里使用for循环遍历数组</p>
<h2 id="参考" class="toc-item group scroll-mt-20">
    参考
    <a href="#参考" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>awk编程的内容极多，这里只罗列简单常用的用法，更多请参考 http://www.gnu.org/software/gawk/manual/gawk.html</p>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    <entry>
        <title>du 命令</title>
        <link rel="alternate" href="/knowledge/linux/linux_du_usage" type="text/html" title="du 命令" />
        <published>2018-06-15T00:00:00+00:00</published>
        <updated>2018-06-15T00:00:00+00:00</updated>
        <id>/knowledge/linux/linux_du_usage</id>
        <content type="html" xml:base="/knowledge/linux/linux_du_usage">
            <![CDATA[<p>from https://blog.csdn.net/ouyang_peng/article/details/10414499</p>
<h2 id="常用参数" class="toc-item group scroll-mt-20">
    常用参数
    <a href="#常用参数" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>du [-abcDhHklmsSx] [-L &lt;符号连接&gt;][-X &lt;文件&gt;][–block-size][–exclude=&lt;目录或文件&gt;] [–max-depth=&lt;目录层数&gt;][–help][–version][目录或文件]</p>
<p>常用参数：</p>
<p>-a或-all:为每个指定文件显示磁盘使用情况，或者为目录中每个文件显示各自磁盘使用情况。</p>
<p>-b或-bytes: 显示目录或文件大小时，以byte为单位。</p>
<p>-c或–total: 除了显示目录或文件的大小外，同时也显示所有目录或文件的总和。</p>
<p>-D或–dereference-args: 显示指定符号连接的源文件大小。</p>
<p>-h或–human-readable: 以K，M，G为单位，提高信息的可读性。</p>
<p>-H或–si: 与-h参数相同，但是K，M，G是以1000为换算单位,而不是以1024为换算单位。</p>
<p>-k或–kilobytes: 以1024 bytes为单位。</p>
<p>-l或–count-links: 重复计算硬件连接的文件。</p>
<p>-L&lt;符号连接&gt;或–dereference&lt;符号连接&gt;: 显示选项中所指定符号连接的源文件大小。</p>
<p>-m或–megabytes: 以1MB为单位。</p>
<p>-s或–summarize: 仅显示总计，即当前目录的大小。</p>
<p>-S或–separate-dirs: 显示每个目录的大小时，并不含其子目录的大小。</p>
<p>-x或–one-file-xystem: 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</p>
<p>-X&lt;文件&gt;或–exclude-from=&lt;文件&gt;: 在&lt;文件&gt;指定目录或文件。</p>
<p>–exclude=&lt;目录或文件&gt;: 略过指定的目录或文件。</p>
<p>–max-depth=&lt;目录层数&gt;: 超过指定层数的目录后，予以忽略。</p>
<p>–help: 显示帮助。</p>
<p>–version: 显示版本信息。</p>
<h2 id="实例" class="toc-item group scroll-mt-20">
    实例
    <a href="#实例" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><h3 id="例1" class="toc-item group scroll-mt-20">
    例1
    <a href="#例1" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>要显示一个目录树及其每个子树的磁盘使用情况</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du /home/linux
</span></pre>
<p>这在/home/linux目录及其每个子目录中显示了磁盘块数。</p>
<h3 id="例2" class="toc-item group scroll-mt-20">
    例2
    <a href="#例2" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>要通过以1024字节为单位显示一个目录树及其每个子树的磁盘使用情况</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -k</span><span style="color:#f8f8f2;"> /home/linux
</span></pre>
<p>这在/home/linux目录及其每个子目录中显示了 1024 字节磁盘块数。</p>
<h3 id="例3" class="toc-item group scroll-mt-20">
    例3
    <a href="#例3" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>以MB为单位显示一个目录树及其每个子树的磁盘使用情况</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -m</span><span style="color:#f8f8f2;"> /home/linux
</span></pre>
<p>这在/home/linux目录及其每个子目录中显示了 MB 磁盘块数。</p>
<h3 id="例3" class="toc-item group scroll-mt-20">
    例3
    <a href="#例3" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>以GB为单位显示一个目录树及其每个子树的磁盘使用情况</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -g</span><span style="color:#f8f8f2;"> /home/linux
</span></pre>
<p>这在/home/linux目录及其每个子目录中显示了 GB 磁盘块数。</p>
<h3 id="例5" class="toc-item group scroll-mt-20">
    例5
    <a href="#例5" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>查看当前目录下所有目录以及子目录的大小：</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -h</span><span style="color:#f8f8f2;"> .
</span></pre>
<p>“.”代表当前目录下。也可以换成一个明确的路径
-h表示用K、M、G的人性化形式显示</p>
<h3 id="例6" class="toc-item group scroll-mt-20">
    例6
    <a href="#例6" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>查看当前目录下user目录的大小，并不想看其他目录以及其子目录：</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -sh</span><span style="color:#f8f8f2;"> user
</span></pre>
<p>-s表示总结的意思，即只列出一个总结的值</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -h --max-depth</span><span style="color:#f92672;">=</span><span style="color:#f8f8f2;">0 user
</span></pre>
<p>–max-depth=n表示只深入到第n层目录，此处设置为0，即表示不深入到子目录。</p>
<h3 id="例7" class="toc-item group scroll-mt-20">
    例7
    <a href="#例7" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>列出user目录及其子目录下所有目录和文件的大小：</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -ah</span><span style="color:#f8f8f2;"> user
</span></pre>
<p>-a表示包括目录和文件</p>
<h3 id="例8" class="toc-item group scroll-mt-20">
    例8
    <a href="#例8" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>列出当前目录中的目录名不包括xyz字符串的目录的大小：</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -h --exclude</span><span style="color:#f92672;">=</span><span style="color:#e6db74;">&#39;*xyz*&#39;
</span></pre>
<h3 id="例9" class="toc-item group scroll-mt-20">
    例9
    <a href="#例9" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>想在一个屏幕下列出更多的关于user目录及子目录大小的信息：</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -0h</span><span style="color:#f8f8f2;"> user
</span></pre>
<p>-0（杠零）表示每列出一个目录的信息，不换行，而是直接输出下一个目录的信息。</p>
<h3 id="例10" class="toc-item group scroll-mt-20">
    例10
    <a href="#例10" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>只显示一个目录树的全部磁盘使用情况</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -s</span><span style="color:#f8f8f2;"> /home/linux
</span></pre>
<h3 id="例11" class="toc-item group scroll-mt-20">
    例11
    <a href="#例11" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<ul>
<li>查看各文件夹大小</li>
</ul>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -h --max-depth</span><span style="color:#f92672;">=</span><span style="color:#f8f8f2;">1
</span></pre>
<ul>
<li>查看指定目录
代码如下：  其中 /path表示路径</li>
</ul>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -h --max-depth</span><span style="color:#f92672;">=</span><span style="color:#f8f8f2;">1 /path  
</span></pre>
<p>具体如下所示：</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -h --max-depth</span><span style="color:#f92672;">=</span><span style="color:#f8f8f2;">1 /data/ 
</span><span style="color:#f8f8f2;"> 
</span><span style="color:#f8f8f2;">1.1G    /data/gitlabDataa  
</span><span style="color:#f8f8f2;">8.0K    /data/test  
</span><span style="color:#f8f8f2;">241G    /data/gitlabData  
</span><span style="color:#f8f8f2;">809G    /data/home  
</span><span style="color:#f8f8f2;">15G /data/OpenGrok  
</span><span style="color:#f8f8f2;">16K /data/lost+found  
</span><span style="color:#f8f8f2;">1.1T    /data/  
</span></pre>
<p>我们发现  /data/home/ 目录占用最多，因此我们可以继续看那个目录占用的最多，如下所示：</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">du</span><span style="font-style:italic;color:#fd971f;"> -h --max-depth</span><span style="color:#f92672;">=</span><span style="color:#f8f8f2;">1 /data/home/  
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">141G    /data/home/wzm  
</span><span style="color:#f8f8f2;">62G /data/home/lwc  
</span><span style="color:#f8f8f2;">421G    /data/home/hcy  
</span><span style="color:#f8f8f2;">16K /data/home/zzp  
</span><span style="color:#f8f8f2;">16K /data/home/zl  
</span><span style="color:#f8f8f2;">54G /data/home/drj  
</span><span style="color:#f8f8f2;">122G    /data/home/sjq  
</span><span style="color:#f8f8f2;">4.1G    /data/home/ljs  
</span><span style="color:#f8f8f2;">6.7G    /data/home/ywm  
</span><span style="color:#f8f8f2;">809G    /data/home/ 
</span></pre>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    <entry>
        <title>sed 命令</title>
        <link rel="alternate" href="/knowledge/linux/linux_sed_usage" type="text/html" title="sed 命令" />
        <published>2018-06-15T00:00:00+00:00</published>
        <updated>2018-06-15T00:00:00+00:00</updated>
        <id>/knowledge/linux/linux_sed_usage</id>
        <content type="html" xml:base="/knowledge/linux/linux_sed_usage">
            <![CDATA[<p>from https://blog.csdn.net/tp7309/article/details/51418412</p>
<h2 id="使用grep正则提取字符串" class="toc-item group scroll-mt-20">
    使用grep正则提取字符串
    <a href="#使用grep正则提取字符串" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><pre style="background-color:#272822;">
<span style="color:#66d9ef;">echo</span><span style="color:#f8f8f2;"> office365 </span><span style="color:#f92672;">| </span><span style="color:#f8f8f2;">grep</span><span style="font-style:italic;color:#fd971f;"> -P </span><span style="color:#e6db74;">&#39;\d+&#39;</span><span style="font-style:italic;color:#fd971f;"> -o
</span></pre>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">find .</span><span style="font-style:italic;color:#fd971f;"> -name </span><span style="color:#e6db74;">&quot;*.txt&quot; </span><span style="color:#f92672;">| </span><span style="color:#f8f8f2;">xargs grep</span><span style="font-style:italic;color:#fd971f;"> -P </span><span style="color:#e6db74;">&#39;regex&#39;</span><span style="font-style:italic;color:#fd971f;"> -o
</span></pre>
<p>xargs会将find结果作为grep的输入，防止find结果过多无法处理 </p>
<p>-P参数表明要应用正则表达式 </p>
<p>-o表示只输出匹配的字符串，这样我们就可以把正则匹配到的结果拿到了。</p>
<h2 id="使用sed正则提取字符串" class="toc-item group scroll-mt-20">
    使用sed正则提取字符串
    <a href="#使用sed正则提取字符串" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Mac OS上用正则的话要用e参数取代P参数，也可以用sed命令： </p>
<ul>
<li>sed命令格式：</li>
</ul>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">sed </span><span style="color:#e6db74;">&#39;s/oldValue/newValue/g&#39;
</span></pre>
<ul>
<li>提取字符串</li>
</ul>
<pre style="background-color:#272822;">
<span style="color:#66d9ef;">echo</span><span style="color:#f8f8f2;"> here365test </span><span style="color:#f92672;">| </span><span style="color:#f8f8f2;">sed </span><span style="color:#e6db74;">&#39;s/.*ere\([0-9]*\).*/\1/g&#39;
</span></pre>
<p>输出：
365</p>
<p>s表示替换，\1表示用第一个括号里面的内容替换整个字符串，sed支持*，不支持?、+，不能用\d之类，正则支持有限。</p>
<ul>
<li>替换字符串</li>
</ul>
<pre style="background-color:#272822;">
<span style="color:#66d9ef;">echo</span><span style="color:#f8f8f2;"> here365test </span><span style="color:#f92672;">| </span><span style="color:#f8f8f2;">sed </span><span style="color:#e6db74;">&#39;s/365/789/g&#39;
</span></pre>
<p>输出：
here789test</p>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    <entry>
        <title>聚合间的通信</title>
        <link rel="alternate" href="/knowledge/ddd/aggregate_comunication" type="text/html" title="聚合间的通信" />
        <published>2018-05-28T00:00:00+00:00</published>
        <updated>2018-05-28T00:00:00+00:00</updated>
        <id>/knowledge/ddd/aggregate_comunication</id>
        <content type="html" xml:base="/knowledge/ddd/aggregate_comunication">
            <![CDATA[<p>以下主要是汤雪华老师在 Jdon 论坛发表的看法：</p>
<p>DDD中聚合根与聚合根之间通信的一些问题的思考</p>
<ol>
<li>
<p>聚合根之间能相互引用吗？</p>
</li>
<li>
<p>聚合根之间如果相互引用了，则会造成一个可怕的后果，那就是：很容易导致取出一个聚合时会级联取出很多直接或间接引用到的其他聚合根，到最后可能会取出整个对象树；</p>
</li>
<li>
<p>那聚合根与聚合根之间就不应该相互引用了吗？我的建议是：是的。但是可以只存储引用聚合根的ID；这样就可以建立聚合根与聚合根之间的关系；</p>
</li>
<li>
<p>那么如何实现聚合根与聚合根之间的通信呢？方法有两个：1）如果是经典的DDD设计，那么应该让领域服务来完成多个聚合根之间的通信，领域服务知道该如何以面向过程的方式如何先调用第一个聚合根做事情，然后再调用第二个聚合根做事情，以此类推。这种方法实际上是一个面向过程的思维，对象实际上已经沦落为被操纵的数据了；2）因为聚合根内不允许注入仓储、服务，并且也不能直接引用其他聚合根，那么如果交互呢？可以通过领域事件实现，即在聚合中如果做了什么操作，本来该调用其他聚合根做事情的地方触发一个领域事件出来，然后其他的领域对象监听该事件，从而完成对象之间的通信。通过这种方法，我们可以在整个领域模型中减少很多领域服务。那么问题是，如果实现这种发送事件与监听事件的机制呢？在领域模型中引入事件总线的设计是一种方法。采用这种设计，就意味着整个领域模型有一个中央事件处理器（事件总线），领域模型中所有的聚合根之间的交互都是通过：事件源生成事件然后传递给事件总线，然后事件总线广播该事件给所有的监听者。但是由于事件监听者是一个个的聚合根，那么如何获取聚合根呢？这是一个问题。另外一个方法也是采用生产者消费者的模式，只不过不是采用事件总线模式，而是让每个聚合根本身就具有发送并广播事件的功能，我们可以在聚合根基类中（交给框架实现）统一实现这个功能，但也会遇到同一个问题，如何以及何时注册事件监听者？</p>
</li>
</ol>
<p>其实我对比了，经典的DDD的领域服务的方式以及事件的方式，其实我觉得从语义上来说，领域服务更能体现业务含义，代码可读性更好。因为它把整个业务过程放在一个服务中完成，我们一看就知道整个业务过程发生了什么；但缺点是扩展性，当一个业务操作需要增加一些步骤或减少一些步骤时，我们必须修改领域服务，但幸好也只需要修改一处即可，即领域服务。而如果是通过事件方式，那么当需求变更时，我们要做的仅仅是增加或移除事件监听者即可，所以可扩展性自然要好很多，但缺点也显而易见，即代码可读性差，我们通常不能完整的知道整个业务操作涉及到哪些领域对象。</p>
<p>以上讨论的都是针对领域模型中聚合根与聚合根之间的通信，不涉及领域模型与其他层之间的通信。我认为聚合根与聚合根之间的通信要难于领域模型与其他层之间的通信。因为领域模型与其他层之间通信时，往往只需要通过IOC创建出一个仓储实例或基础框架层的某个服务的实例即可；但是如果是聚合根与聚合根之间的通信，那么我们为了能够得到监听者聚合根实例，必须要有一个根据事件源聚合根中所引用的目标聚合根的ID找到目标聚合根的过程，而我们希望这个寻找目标聚合根的过程是透明的，这个有点像LazyLoad的概念了，第一次只获取“一个可以找到目标引用对象的ID”，等需要引用到目标对象时，才根据该ID获取目标引用对象。</p>
<p>上面思考了很多，其实我也只是想探索一种即代码可读性好，有方便扩展的聚合根与聚合根之间通信的解决方案，不知道大家遇到这个问题如何解决的？</p>
<hr />
<p>经过进一步的一些学习，我觉得可以这样来实现聚合根之间的通信：
如果是经典的DDD，则通过领域服务来协调聚合根做事情；
如果是DCI，则在场景中协调聚合根扮演角色，然后做事情；</p>
<p>聚合根之间通过ID方式引用，而不是通过指针引用。
原因如下：</p>
<p>1）ID同样可以起到表示对象关系的作用；</p>
<p>2）使用ID关联可以天生让聚合更轻巧，节省不必要的内存，提高性能和可伸缩性；</p>
<p>3）使用ID关联可以避免取出一个聚合时，整个数据库被拖出来的风险，当然这是在没有LazyLoad支持的情况下才会发生；</p>
<p>4）使用ID关联的聚合不会对ORM等持久化机制有特殊要求，比如必须支持LazyLoad特性等；</p>
<p>5）ID是值对象，具有不变性，而引用则不是。</p>
<hr />
<p>1.聚合根之间通过ID关联即可，一个聚合根的任何一个操作不应该依赖于其他聚合根的信息或操作；
2.聚合根之间只能是最终一致性；
3.聚合根之间异步通信用event-driven architecture来实现；
4.saga，或ProcessManager就是用来实现这种异步通信从而实现最终一致性的一种技术；
5.采用event sourcing+in memory的架构模式让这一切更完美；</p>
<p>发现jdon上目前讨论saga或processmanager的帖子很少，但实际上要实现最终一致性，它们不得不提。</p>
<hr />
<p>这段话描述了我们应该ID关联，而不是对象引用：
Also when one Aggregate needs to reference another Aggregate—and this will almost always be true—you should point to the associated Aggregates by identity only, not by object reference. By using identity you will allow each referenced Aggregate to reside anywhere in the distributed infrastructure as best determined by the low-level partitioning software.</p>
<hr />
<p>如果一个对象想通过事件去通知另一个对象做事情，那意味着这件要做的事情还没发生。那就不能用事件，而应该用command。我请求你做做什么，我就发一个request给你，或者command给你，然后你处理就行；所以，聚合根内，发出来的事件一定是告诉别人我发生了什么，而不能是请帮我做什么这样的事件；请帮我做什么实际上已经带有目的性，也就是说它实际上已经知道了谁会去处理该事情。如果这种情况你也用事件，虽然从技术角度来说勉强解耦了，但从语义上来说并没有解耦，也就是你说的逻辑上的依赖；聚合根之间的通信应该总是由一个第三方的对象来协调，如event handler。</p>
<p>所以，在国外，才会有saga的存在，或者叫ProcessManager的存在。这个就是实现聚合根的异步通信而设计的产物。</p>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    <entry>
        <title>聚合的设计</title>
        <link rel="alternate" href="/knowledge/ddd/aggregate_design" type="text/html" title="聚合的设计" />
        <published>2018-05-28T00:00:00+00:00</published>
        <updated>2018-05-28T00:00:00+00:00</updated>
        <id>/knowledge/ddd/aggregate_design</id>
        <content type="html" xml:base="/knowledge/ddd/aggregate_design">
            <![CDATA[<p>以下主要是汤雪华老师在 Jdon 论坛发表的看法：</p>
<p>现在我也对如何设计聚合以及如何确定聚合边界有了一些看法：</p>
<p>一个聚合是由一些列相联的Entity和Value Object组成，一个聚合有一个聚合根，聚合根是Entity，整个聚合被看成是一个数据修改的单元，也就是说整个聚合内的所有对象要么同时被保存，要么都不能保存，即保存到数据持久层时必须以覆盖的方式来保存，而不是追加方式或合并的方式来保存，否则无法确保聚合内的对象的数据一致性。另外，整个聚合的不变性约束由聚合根负责维护。作为推导的一个结论：我们不能只保存一个聚合内的一部分对象；聚合内的所有实体和值对象应该总是一起被取出来一起被保存，因为一个聚合是一个数据持久化的单元，不需要考虑将整个聚合根取出来有性能问题，因为任何一个聚合根都有明确的边界。目前的内存缓存框架都已发展的比较成熟，性能已经不是问题；如MongoDb，MemCache，NoSQL，等等；</p>
<p>聚合内的对象之所以聚合在一起的关键原因不是因为它们具有一些关联关系或依赖关系，而是因为聚合内的对象之间具有某些不变性规则，在任何时候，聚合内的所有这些对象必须满足这些不变性规则。所以，如果一些对象之间看似有一些关联关系或依赖关系，但是他们之间不具有任何不变性约束，那么就不应该把这些对象放在一个聚合中，否则只会增加这些对象之间不必要的耦合性，增加对象维护的难度；(Remembering that aggregates are not about composition, but about managing invariants, we don’t compose entities on an aggregate root only as a matter of convenience)。那么为什么一些对象之间有不变性约束后就一定非要聚合在一起不可呢？首先需要先明确一下什么是聚合，聚合是一个整体，是修改数据的一个最小单元，一个聚合有一个头，即聚合根，聚合根维护了整个聚合的不变性，所以整个聚合在外面看来就是一个对象，而不是多个对象的组合。另外一点非常重要，聚合在被持久化到数据库时，是以完全覆盖的且事务的方式保存。好了有了前面的共识之后，我们再想想为什么聚合能保证多个对象之间的不变性规则约束？其实很只要真正理解了前面的约束之后就很容易理解了。你想想不管一个聚合中有什么约束，所有的约束由该聚合自己维护，所以就可以确保数据在领域模型级别就是完全一致的，没有任何违反规则的错误数据，即内存中的数据都是正确的。再加上这些正确的数据被持久化时是以完全覆盖的且事务的方式保存，从而也确保了数据库里的数据不可能出现不一致。这里唯一让你可能担心的问题是，如果多个用户同时更新一个聚合时，会产生并发冲突，此时将会使系统变得不可用！其实我认为这不是个问题，因为现在的支持高并发写的分布式存储数据库已经非常成熟，比如淘宝的oceanbase（已经开源了）,还有那些NoSQL也支持，或者用分布式缓存或MongoDB也效率不错。就算没这么好的存储机制支持，用传统的数据库来存储，我相信也不会有大问题，现在的数据库已经不是10年前的数据库了，在处理高并发写的能力上已经不是同日而语了。其实并发冲突并没有你想的那么严重，一般通过select before update，以及version乐观锁定，就没问题了。支付宝一天几千万比在线交易，全部是强一致性，不然不叫在线交易系统。聚合根的存储属于单点存储，不能用最终一致性。最终一致性是弱一致性的一种特殊方式，但是最终一致性往往用于处理分布式系统中同一份数据在多个地方有备份，然后可能会出现多个地方数据不一致的问题，但是最终都会一致即同步完成。具体大家可以看看CAP定理。</p>
<p>所谓的不变性约束是指：假设有一个采购订单Order，一个Order下有多个订单项OrderItem，假设有一个约束是，该采购订单的总额不能超过100元。那么订单的总额不能超过100元就是一个不变性约束；那么Order和OrderItem聚合在一起就显得很有意义。在这种情况下，有Order来维护这个规则，当整个订单被保存时，比如采用覆盖的方式保存到数据库。再举个例子，比如一个论坛中有帖子和回复，大家都知道一个帖子有多个回复，回复离开帖子没有意义。所以大家很自然会认为帖子和回复应该在一个聚合内，帖子是聚合根。但是这样其实很有问题，仔细想想会发现帖子和回复之间并没有不变性约束规则，回复和帖子之间只有一个简单的1:N的关系而已。如果每次在添加一个回复时，都把帖子先取出来，然后在帖子的回复列表中把新的回复添加进去，然后再保存整个帖子，那么不难想象，这样做无疑是小题大做，并且每次为了更新一个回复或新增一个回复，就要把整个帖子取出来，这样做无疑非常浪费内存，并且在多用户并发回同一个帖子的情况下则会更糟糕。实际上仔细分析一下，帖子和回复都应该是聚合，并且分别都是聚合根，我们要确保的仅仅是回复的帖子不能被修改即可。添加一个回复实际上和帖子无关，帖子根本不关心已经有多少个回复了。这点和之前的订单的例子不同，订单需要准确维护其包含的所有订单项以便能够计算出总价是否超出100元。其实这么多问题还是不足以详细说明什么样的对象该被聚合在一起，这里只是作为抛砖引玉，引发大家思考如何设计聚合。</p>
<p>一个聚合需要具备哪些更多的特征呢？1）需要具备前面说的基本特征；2）聚合内的子对象要么是值对象，要么是只读的实体，为什么需要只读，因为聚合的子实体是可以被临时传递到外部的，要是外面的对象调用子对象的某个方法修改了子对象的属性，那么就意味着绕过聚合根修改了聚合内的东西，这样就无法确保聚合内的不变性了；3）如果聚合根有集合类型的属性，那么该集合也必须是只读的，即不允许别人在外部添加或删除集合的元素，否则也同样无法确保聚合的不变性。总之，我们要避免任何可能从外部修改聚合的行为发生，所有修改聚合的行为必须通过聚合根来实现。所以，理论上我们推荐大家在聚合内尽量设计值对象，原因大家多想想吧！其实从逻辑哲学的角度去思考，值对象表示了不变性，值对象表示一个值，值可以用来描述事物，事物就是实体。要是实体是由其他实体来描述，而其它实体是可变的，那么如何确保被描述的实体是可控的？大家想想为什么DDD书中，为什么要在OrderItem中存放当时购买时的Price就知道了。要是直接引用Product对象，那么会导致OrderItem引用了一个可变的对象，就无法确保订单的不变性约束。而唯有持久一个不变的值对象，才能维持其不变性。</p>
<p>Evans关于聚合的两条推荐准则：1）聚合不要设计的过大，过大的聚合很难确保不变性，从而很难确保数据的强一致性；2）聚合与聚合之间不要通过引用的方式来关联，而应该通过ID关联，通过ID关联也同样能表示聚合之间的关系，并且具有更好的性能和可伸缩性，聚合根之间通过ID关联的好处是：不会因为Load一个聚合根而把其他关联的聚合根一起Load出来，这样也避免了Load一个聚合根会把整个数据库Load出来的风险；另外，对ORM的要求也很低，不需要ORM支持LazyLoad；聚合根与聚合根之间的关系不像聚合内的Entity之间这么强烈内聚，它们之间仅仅是某种比较弱的关联关系，每个聚合根都有其独立的生命周期；</p>
<hr />
<p>我觉得你既然明白聚合是的目的是因为不变性而存在，即为了数据一致性而存在，那么它在内存中所做的所有的一致性努力为什么可以被拆开来部分的保存聚合的状态到数据库？那在内存中所做的维护不变性的努力不是白做了？我觉得你还没明白什么叫“a aggregate is a unit of data changes”,聚合是一个修改数据的最小单元。既然是一个最小单元就是不能被拆分，就是在被持久化到数据库时不能被部分保存，否则无法确保数据库里的一致性；所以，这才引出了，为什么聚合不应该设计的太大，我们应该将那些真正拥有不变性的对象聚合在一起，而现实生活中真正拥有不变性要求的对象其实是很少的；</p>
<p>另外，关于外部如何访问聚合内的实体的问题，我认为聚合外部要访问某个聚合，原因有两个，要么要取数据，要么要更新它。Evans说过，聚合内部的实体可以被临时传出去，但是该传出去的实体不能被直接修改状态，如果要修改被传出去的实体，必须通过聚合根来做，一切要更改聚合内任何实体状态的操作都应该由聚合根来负责，因为聚合根负责不变性约束；那么我们如何确保被传出去的实体不会被外部修改呢？不能只是嘴巴上说说别人就不会改了吧！那只有两个办法，要么传递副本出去，要么传递状态只读的对象即值对象；</p>
<hr />
<p>我的观点是：</p>
<p>1）Repository接口的输入参数或返回参数应该是聚合根，而不能是聚合内的某个实体；</p>
<p>2）如果Repository接口的参数可以随便设计，那Repository已经和DAO五差别了，这其实就是把Repository当作DAO来用了，纯粹是把他当作是一个更新数据或去数据的接口了。而实际上DDD中的Repository面向的一定是聚合根，就是指接收的参数或返回的都应该是聚合跟；这样才符合Repository是一个生活在内存中的集合的定义；</p>
<p>3）在Order类中访问Repository是不可取的；我极不赞成这样的做法；而基于事件驱动的思路我比较赞同；Domain Object的职责是告诉别人我发生了什么即可，而不能去请求别人我要做什么，比如请求Repository帮他把某个OrderItem给持久化一下；</p>
<p>4）再给你举个列子说明一下为什么不能只保存聚合的部分实体；比如一个订单，目前最多只能容下最多一个OrderItem了，然后A,B两个人同时取出这个订单，这是对于A,B来说，他们都知道还能再新增一个OrderItem，于是他们先后新增了一个OrderItem，当A新增一个OrderItem时，数据库锁住Order，然后更新成功，解锁；然后B新增了一个OrderItem，数据库再锁，然后保存成功，然后解锁；为什么后面的OrderItem也能保存成功？因为数据库是不具备业务逻辑去判断当前这个OrderItem能否被新增的，只有内存中的Order才知道；数据库只能确保不能有两个人同时改同一个Order；基于上面的情况，数据库最后就会出现一个Order包含了过多的OrderItem的情况，从而也就违反了不变性约束；</p>
<p>5）从逻辑的角度，你想想你希望一个东西的状态不能违反某个不变性，但是允许多个人以先后的顺序在不同的内存空间部分的添加或删除其子实体，并且可以允许部分持久化；要知道数据库是不具备聚合所规定的不变性约束规则的，它只知道帮你锁数据，或者接收新的数据而已；只是一个帮你管理数据的容器；再强调一次Aggregate is a unit of data changes，要做到unit，不只是在内存中要通过聚合的方式来控制，也需要在数据库中也确保其被更新时是以一个整体的姿态被更新的，而不能只更新部分；那么因为数据库里没有所谓的聚合的概念，那如何确保数据库里某些实际上是“聚合”数据也能作为一个单元被更新呢？只有一个办法，那就是任何人更新这些数据时，都是完整替换，而不是部分替换；从而才引出为什么整个聚合要整个完全覆盖数据库里的数据的原因。</p>
<p>当然，除非你每次在保存任何一个聚合之前，都先去数据库查询出最新的Order信息，然后和你当前内存中将要保存的Order进行比较，判断当前最新的Order中的你新增的那个OrderItem能否被添加进Order；但是要对每个聚合都做这样的处理不是很麻烦吗？</p>
<p>另外，从理论上讲，这样的做法也是逻辑性不严密的。因为你如何确保当你在保存Order前从数据库查询出来Order，在等你做了“你内存中Order”与“数据库里新查出来的Order”的对比之后，然后再做保存的那段时间内别人没有修改过数据库里的Order呢？除非你在查询出Order之后立马再用锁锁住数据库里的Order。这样做不是非常麻烦吗？</p>
<p>还有，如果我不是用数据库来存储的，比如是用MongoDB来存储的，或者其他一些不支持锁的存储介质，那如何确保这些存储介质里存放的数据是具备一致性的呢？或者更极端的情况如果我一个聚合是放在两个分布式的数据库中呢？是不是要用分布式锁了？那我如果一个聚合的一部分放在文件，一部分放在数据库里，那你如何锁？</p>
<p>在理解一下什么是Aggregate is a unit of data changes.Unit就是数据更改的原子单元，原子不能被部分更新，原子可以看成是一个值对象，值对象不可更新，只能直接整个替换；</p>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    <entry>
        <title>DDD设计开发步骤</title>
        <link rel="alternate" href="/knowledge/ddd/ddd_steps" type="text/html" title="DDD设计开发步骤" />
        <published>2018-05-28T00:00:00+00:00</published>
        <updated>2018-05-28T00:00:00+00:00</updated>
        <id>/knowledge/ddd/ddd_steps</id>
        <content type="html" xml:base="/knowledge/ddd/ddd_steps">
            <![CDATA[<p>以下主要是汤雪华老师在 Jdon 论坛发表的看法：</p>
<p>DDD，领域建模是核心。</p>
<p>以DDD为开发模式的设计开发步骤可以是：
1）分析需求；</p>
<p>2）画出用例图，系统中各个角色如何使用系统，也包括外部系统如何使用系统，也包括系统中到某个时间点自动启动的某些功能（此时角色就是时间）；</p>
<p>3）针对各个用例图，就知道了系统使用的各种业务场景，同时也明确了系统的边界，从而就明确了领域模型的边界；</p>
<p>4）在领域模型的边界内划分聚合，找出每个聚合的边界，找出边界内的聚合根，实体，值对象；这步是难点。这里一定不能混淆的一个概念是，领域建模不是以用户为中心的建模，而是以用户的需求为中心的建模。所以要努力寻找各种业务概念，切勿将所有行为都设计到User，Employee，Account，等对象上。而应该找出如Order，LeaveRecord，Payment，JobApplication，等业务概念。</p>
<p>5）如果是根据经典的DDD领域建模，我们可以接下来分析一些领域服务，领域服务用于协调多个领域对象之间的行为；</p>
<p>6）根据领域模型中的聚合根设计对应的仓储；这步完成就表示领域模型已经完成了。</p>
<p>7）对照前面的需求用例，检查领域模型是否都可以满足用例中提到的各种业务场景；</p>
<p>8）进一步分析领域模型，分析模型中哪些点是和特定系统相关的设计，哪些点可以进一步抽象出通用的领域模型，该通用领域模型可以满足此类相似系统的核心业务。比如积分系统中，可以抽象出“积分发放/消费”的模型。该模型可以在任何财务或积分系统中使用；</p>
<p>9）现在，可以让有经验的人检查一下你设计的领域模型了，也就是如果有可能就进行一下模型Review，确保在写代码之前，模型的正确性。</p>
<p>10）对领域模型进行单元测试，单元测试的时候，如果只想测试业务逻辑，可以设计Stub的仓储；如果想和持久化一起测试，那可以编写真实的仓储，如果你是用Hibernate来做数据存储，可以在此时建立ORM映射文件和数据库表；写完后，编写测试用例进行单元测试；</p>
<p>11）最后实现你的UI层。但是为了让你的UI层可以不依赖于你的模型设计和测试，可以在UI层编写他自己需要的ViewModel，然后他在Web Form或Controller或View上只要访问ViewModel即可。等到你的领域模型完成并测试通过后，把领域模型的数据填充到ViewModel即可；</p>
<p>差不多就是这个步骤吧，仅供参考。</p>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    <entry>
        <title>领域模型实例分析之-论坛</title>
        <link rel="alternate" href="/knowledge/ddd/forum_domain_model" type="text/html" title="领域模型实例分析之-论坛" />
        <published>2018-05-28T00:00:00+00:00</published>
        <updated>2018-05-28T00:00:00+00:00</updated>
        <id>/knowledge/ddd/forum_domain_model</id>
        <content type="html" xml:base="/knowledge/ddd/forum_domain_model">
            <![CDATA[<p>以下主要是汤雪华老师在 Jdon 论坛发表的看法：</p>
<p><img src="/static/img/doc/ForumDomainModel.png" alt="ForumDomainModel" title="" loading="lazy"></p>
<p>说明：</p>
<p>1）上面的领域模型在设计时借鉴了 DDD 和 CQRS 的思想；</p>
<p>2）利用DDD的思想来设计实体、值对象、聚合、聚合根；图中有三个聚合根，分别是Forum、Thread、User；其中 Thread 聚合根聚合了 Post 和 ViewCounter 两个对象；Post是Thread的回复，显然Post离开Thread没有意义，但是Post在Thread聚合内有一个本地标识，即只要在当前Thread下唯一即可，不需要全局唯一。</p>
<p>3）由于CQRS思想的引入，可以确保我们在设计领域模型时不必考虑由于对象关联而产生的统计信息该如何存放，从而让领域模型更精简明了；如帖子的总回复数、最新回复时间、最新回复人，等等，这些信息只是统计信息，只用于在界面上显示，即我们只有在查询时才需要这些信息，因此可以在CQRS的Q端实现。</p>
<p>4）由于CQRS思想的引入，也可以让仓储更精简，不需要提供用于查询领域对象并在界面上显示结果的接口，而只需要提供用于查询单个聚合根或Add以及Remove的操作；</p>
<p>5）上面的领域模型只关注一个标准论坛的基本功能；</p>
<p>希望大家能多给些意见。之前学了很多的理论知识，现在是该通过一些建模例子锻炼一下的时候了。</p>
<hr />
<p>经过一些后续的思考后，我发现上面的领域模型中的帖子（Thread）的一些职责的设计有点问题。详细分析如下：</p>
<p>如果直接让帖子（Thread）维护回复（Post），那么当我们要添加一个回复时，必须把帖子的所有回复取出来，然后才能添加，这样势必会导致性能低下。本来依据信息专家模式，我们应该将添加回复的职责交给帖子来完成，但是因为遇到性能问题，我们必须考虑选择其他方案来即能在业务上保持帖子和回复的业务关系完整性，又不会有性能问题。</p>
<p>经过我的思考，我认为在ThreadRepository中完成这个职责比较合理。原因是：ThreadRepository是维护Thread的，因此它知道所有的Thread以及每个Thread聚合的内部细节，否则ThreadRepository无法对Thread进行持久化。所以，我们可以给ThreadRepository增加一个职责：AddThreadPost(threadId, post)，该职责表示为某个帖子增加一个回复。AddThreadPost内部实现时不必先把Thread取出来到内存，而是可以直接操作关系数据库；依照这个推理，UpdatePost方法也可以这样实现；</p>
<p>我的这个解决方案如何呢？</p>
<hr />
<p>从我上面的分析，大家有没有看到一个规律呢？那就是分析业务时，领域对象之间的关系并不代表在设计阶段必须在领域对象之间通过引用来表达，因为这很可能会导致性能低下，DDD告诉我们领域模型设计时不仅要考虑如何实现业务需求，也要遵循一些基本的软件设计原则以及性能方面的一些问题。实际上我认为领域对象之间的关系是从业务角度理解的一种业务关系，而在OO设计阶段并非一定要通过对象关联来表达这种关系，而可以采用其他替代方案但必须同样也要能表达业务关系。</p>
<p>从中我总结的规律是：</p>
<p>1）这种情况发生在1:N的时候；</p>
<p>2）当N这一端的明细项会在1这一段的对象之后逐步添加时；</p>
<p>3）N很大时；</p>
<p>这种情况下，我们往往需要采用上面的方案。</p>
<p>举个例子：
电子商务系统中，创建一个订单Order时，我们可以把Order的明细项OrderItem作为一个集合放在Order内，因为OrderItem总是和Order一起创建，不会在Order被创建后再逐步添加到Order中；
而在论坛中则不同，我们首先创建一个帖子Thread，然后回复会在Thread被创建后慢慢逐个增加，此时在当Post很多的时候，如果还是为Thread建立一个Post的集合的话，会导致性能低下。</p>
<hr />
<p>banq:</p>
<p>这样下去 ThreadRepository和ThreadService或ThreadManager等非模型之外的工具类有什么区别呢？最后Thread还是变成数据，被这些工具类操作来操作去，非常被动，这失去MDD模型驱动的本质。</p>
<p>Thread当然应该知道自己内部规则，为了性能问题，可以把POST的ID代表形成一个树形结构放在内存中，以后有新的回复，追加append新ID到内存中这个树形结构就可以，这类似X++操作。JiveJdon的TreeModel模型类就是做这个的。</p>
<p>当然，如果是SpeedVan所说，如果是一个很大内存，我们完全可以认为Thread的所有Post集合都在内存中，DDD提出考虑设计性能是完全基于对象的，而对象如何持久的性能是不属于基于对象的操作，而是应该对象内部机制，我们不能把我们基于数据库性能设计的思维习惯带到DDD中。</p>
<hr />
<p>我理解你们所说的，听你们这么说来，我确实在有些方面理解错了。把数据库方面的性能问题考虑进了DDD建模的过程中。但是如果在Thread中只保留PostID的集合的话，如果我想更新某个Post的内容怎么做？谁去获取Post的内容？另外如果用In Memory的方式话，是不是不太符合实际？难道用想用DDD的设计方式，只能用In Memory的方式才能做到真正的OO吗？难道用传统数据库来持久化对象的方式就无法做到好的DDD了吗？Evans也说了，实体是有生命周期的，其中就包括了状态持久化到持久化介质或从持久化介质中重建。所以，我们不能用In Memory这种方式来“逃避”现实。对象状态存储起来然后再重建是一种很正常的思维逻辑，我们不能指望任何应用程序都能做到In Memory方式。</p>
<hr />
<p>经过最近的一段时间的思考后，我认为帖子和回复是两个独立的聚合根。因为：</p>
<p>1）帖子和回复的关系比较弱；没有聚合的关系，只是普通的关联关系，这点不像订单和订单项，订单和订单项之间才是内聚的关系；</p>
<p>2）帖子不关系它下面有多少个回复；</p>
<p>3）虽然从依赖性来说，回复离不开帖子，从生命周期来说，回复的生命周期也从属于帖子；但这并不表示回复必须要被内聚在帖子中；</p>
<p>4）Evans告诉我们，聚合内实体之间应该是因为不变性（Invariant）而聚合在一起的，而不是因为简单的关联关系或生命周期等原因；</p>
<p>5）因为帖子和回复之间并无不变性约束；新增一个回复时，完全可以不必让帖子知道，帖子也不关心是否有人回复它了；帖子和回复都可以独立变化；</p>
<p>6）至于帖子和回复之间的关联如何表示，我现在认为应该用ID表示，只要在回复上设计一个帖子ID即可，至于帖子是否应该有一个回复ID的列表，我觉得没必要，要这个集合来干什么呢？</p>
<p>7）帖子与回复之间的关系不是帖子在管理维护回复，如果你说帖子应该有一些如总回复数，最后回复人，最后回复时间，最后回复ID之类的统计信息，那我真觉得是冗余，这些信息放在domain中实现，只会增加domain的负担，统计信息只会在查询时需要知道，只会在界面上显示时需要这些信息；统计信息种类繁多，每个人需要看的统计信息完全不同，如果要把这种因人而异的各种统计信息放在domain中处理和维护，那我觉得domain就太臃肿了。按照CQRS的思想，命令和查询应该分开，统计信息属于查询端需要解决的问题，如果要在命令端做一些额外的不属于领域业务逻辑的操作去维护这些统计信息，那无疑会让领域模型沉重不堪。按照这样的思路，那么我们在领域中，只要维护好帖子和回复的关系，即只要确保每个回复有一个对应的帖子ID，且确保帖子ID是只读的即可。这样就意味着已经建立了回复和帖子的关系了。然后在查询端，如果并发量不大的情况下，则可以在每次查询时通过表关联来获取这些统计信息，如果并发量比较大，那么可以采用缓存等技术，也可以设计一张额外的表，里面存放界面上需要显示的前十页的帖子，然后我们每隔5分钟去更新这个表，然后每次查询时，我们只要从这张表中获取数据即可，在加上缓存等技术，相信性能不是什么问题。在确保数据一致的情况下，要解决查询快的问题还是有很多方法可以用的呢，但是要解决高并发的情况下，让domain去维护一些不该维护的统计信息，那我觉得是方向错误了。</p>
<p>8）domain中其实很纯净，就是一个个的聚合，每个聚合维护了一定的不变性，当然大部分聚合都是简单的单个实体，很少比例的聚合内会包含一些其他的本地实体；聚合设计出来的目的是为了在领域中维护数据的不变性规则，目的是确保数据一致性；所以我们强调聚合应该总是作为一个整体来看待，当我们持久化一个聚合时，应该总是采用完全覆盖的方式保存，而不是以追加或合并的方式去保存，否则聚合在内存中做的所有关于不变性方面的控制努力就都白费了；</p>
<p>9）聚合与聚合之间的通信，以及关于如何维护聚合与聚合之间数据一致性的问题。我现在认为通信方式应采用领域事件加异步响应的方式，数据一致性采用最终一致性，这样可以提高系统的整体性能和可用性；这方面Event Source就是这个思想；为什么聚合之间可以异步的方式在不同的时间分别各自更新呢？因为聚合与聚合之间本质上没有强一致性需要维护的不变性规则，如果真的有这种规则，那就意味着聚合边界没有设计好。我们只要确保每个聚合内部是强一致性的，聚合之间是最终一致性的，这样就能确保整个domain能达到最终一致性，并提供整体不错的性能和可用性。</p>
<p>10）关于聚合内部的状态是否应该由事件驱动，是否应该用事件来表示domain所经历的所有相关事实，我也非常认同这样的做法和认知观，但我认为只要做到的上面提到的这些点，即便是用经典的DDD，也是一个不错的设计；</p>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    <entry>
        <title>centos环境搭建</title>
        <link rel="alternate" href="/knowledge/linux/centos_env_setup" type="text/html" title="centos环境搭建" />
        <published>2018-04-14T00:00:00+00:00</published>
        <updated>2018-04-14T00:00:00+00:00</updated>
        <id>/knowledge/linux/centos_env_setup</id>
        <content type="html" xml:base="/knowledge/linux/centos_env_setup">
            <![CDATA[<h2 id="准备" class="toc-item group scroll-mt-20">
    准备
    <a href="#准备" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>本次搭建遵循以下规则：</p>
<ul>
<li>安装包从官网下载，尽量选择稳定版本</li>
<li>安装包都放在/usr/local/src目录中</li>
<li>对需要编译的软件，尽量选择安装在<code>/usr/local</code>目录，如<code>/usr/local/nginx</code>, <code>/usr/local/redis</code>。 因为这类软件安装后可执行文件一般都是在<code>/usr/local/bin</code>或<code>/usr/local/sbin</code>, 因此就近原则便于管理</li>
<li>对解压后就可以使用的软件，一般就放在<code>/opt</code>目录下，如jdk, zookeeper</li>
</ul>
<p>nginx及需要用到模块的源码，如下</p>
<ul>
<li><a href="https://nginx.org/en/download.html">nginx</a>, 目前用的1.12.x版本。</li>
<li><a href="https://www.openssl.org/source/">openssl</a>, 让ngnix支持ssl(https)功能。一般linux有自带(版本很老)，但nginx在编译时可能找不到，所以最好还是下载一份，目前用的1.1.x并带有小写字母的稳定版本。</li>
<li><a href="https://www.pcre.org/">pcre</a>, 让ngnix支持rewrite功能。目前用的8.x版本，最新版本编译不过。</li>
<li><a href="https://zlib.net/">zlib</a>，让ngnix支持gzip功能. 目前用的1.2.x版本。</li>
<li><a href="https://github.com/openresty/echo-nginx-module/releases">echo</a>, 让ngnix支持echo输出字符的功能, 对于调试很方便. 目前用的版本是0.61。</li>
<li><a href="https://github.com/nbs-system/naxsi/releases">naxsi</a>, 让ngnix支持WAF防火墙,主要是防御XSS和SQL注入的功能. 目前用的0.55.x版本。</li>
</ul>
<p>java，目前选择的是Oracle的jdk8(8是长期维护版LTS)，新版本还有9和10</p>
<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">jdk8</a></li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html">jce8</a>, 这个用于AES加解密长度限制问题。</li>
</ul>
<p>redis，目前选择的是 3.2.x，最新版是4.x.x</p>
<ul>
<li><a href="https://redis.io/download">redis</a></li>
</ul>
<p>zookeeper, 目前用的3.4.x</p>
<ul>
<li><a href="https://zookeeper.apache.org/releases.html">zookeeper</a></li>
</ul>
<h2 id="更新系统" class="toc-item group scroll-mt-20">
    更新系统
    <a href="#更新系统" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><pre style="background-color:#272822;">
<span style="color:#f8f8f2;">yum update
</span></pre>
<p>如果发现更新源地址不可用，去 /etc/yum.repo.d目下修改源的配置(或自己新建一个xxx.repo文件)，再执行。</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">[base]
</span><span style="color:#f8f8f2;">name=CentOS-$releasever - Base
</span><span style="color:#f8f8f2;">baseurl=http://10.10.10.1/centos/$releasever/os/$basearch/
</span><span style="color:#f8f8f2;">enable=1
</span><span style="color:#f8f8f2;">gpgcheck=0
</span><span style="color:#f8f8f2;">gpgkey=http://10.10.10.1/centos/RPM-GPG-KEY-CentOS-6
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">[updates]
</span><span style="color:#f8f8f2;">name=CentOS-$releasever - Updates
</span><span style="color:#f8f8f2;">baseurl=http://10.10.10.1/centos/$releasever/updates/$basearch/
</span><span style="color:#f8f8f2;">enable=1
</span><span style="color:#f8f8f2;">gpgcheck=0
</span><span style="color:#f8f8f2;">gpgkey=http://10.10.10.1/centos/RPM-GPG-KEY-CentOS-6
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">[extras]
</span><span style="color:#f8f8f2;">name=CentOS-$releasever - Extras
</span><span style="color:#f8f8f2;">baseurl=http://10.10.10.1/centos/$releasever/extras/$basearch/
</span><span style="color:#f8f8f2;">enable=1
</span><span style="color:#f8f8f2;">gpgcheck=0
</span><span style="color:#f8f8f2;">gpgkey=http://10.10.10.1/centos/RPM-GPG-KEY-CentOS-6
</span><span style="color:#f8f8f2;">
</span></pre>
<p>更新完成后，查看下系统及内核版本</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">lab_release</span><span style="font-style:italic;color:#fd971f;"> -a
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">LSB Version:	:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch
</span><span style="color:#f8f8f2;">Distributor ID:	CentOS
</span><span style="color:#f8f8f2;">Description:	CentOS release 6.9 (Final)
</span><span style="color:#f8f8f2;">Release:	6.9
</span><span style="color:#f8f8f2;">Codename:	Final
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">uname</span><span style="font-style:italic;color:#fd971f;"> -a
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">Linux localhost 2.6.32-642.el6.x86_64 </span><span style="color:#75715e;">#1 SMP Tue May 10 17:27:01 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
</span><span style="color:#f8f8f2;">
</span></pre>
<h2 id="安装nginx" class="toc-item group scroll-mt-20">
    安装nginx
    <a href="#安装nginx" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><h3 id="安装gcc" class="toc-item group scroll-mt-20">
    安装gcc
    <a href="#安装gcc" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#f8f8f2;">yum install gcc gcc-c++
</span></pre>
<h3 id="解压nginx及其依赖模块" class="toc-item group scroll-mt-20">
    解压nginx及其依赖模块
    <a href="#解压nginx及其依赖模块" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#66d9ef;">cd</span><span style="color:#f8f8f2;"> /usr/local/src
</span><span style="color:#f8f8f2;">tar zxvf nginx-1.12.2.tar.gz
</span><span style="color:#f8f8f2;">tar zxvf pcre-8.40.tar.gz
</span><span style="color:#f8f8f2;">tar zxvf zlib-1.2.11.tar.gz
</span><span style="color:#f8f8f2;">tar zxvf echo-nginx-module-0.61.tar.gz
</span><span style="color:#f8f8f2;">tar zxvf naxsi-0.55.3.tar.gz
</span><span style="color:#f8f8f2;">
</span></pre>
<h3 id="编译与安装" class="toc-item group scroll-mt-20">
    编译与安装
    <a href="#编译与安装" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#66d9ef;">cd</span><span style="color:#f8f8f2;"> nginx-1.12.2
</span><span style="color:#f8f8f2;">./configure \
</span><span style="font-style:italic;color:#fd971f;">--add-module</span><span style="color:#f92672;">=</span><span style="color:#f8f8f2;">../naxsi-0.55.3/naxsi_src \
</span><span style="font-style:italic;color:#fd971f;">--add-module</span><span style="color:#f92672;">=</span><span style="color:#f8f8f2;">../echo-nginx-module-0.61 \
</span><span style="font-style:italic;color:#fd971f;">--with-openssl</span><span style="color:#f92672;">=</span><span style="color:#f8f8f2;">../openssl-1.1.0g \
</span><span style="font-style:italic;color:#fd971f;">--with-pcre</span><span style="color:#f92672;">=</span><span style="color:#f8f8f2;">../pcre-8.40 \
</span><span style="font-style:italic;color:#fd971f;">--with-pcre-jit </span><span style="color:#f8f8f2;">\
</span><span style="font-style:italic;color:#fd971f;">--with-zlib</span><span style="color:#f92672;">=</span><span style="color:#f8f8f2;">../zlib-1.2.11 \
</span><span style="font-style:italic;color:#fd971f;">--with-http_realip_module </span><span style="color:#f8f8f2;">\
</span><span style="font-style:italic;color:#fd971f;">--with-http_stub_status_module </span><span style="color:#f8f8f2;">\
</span><span style="font-style:italic;color:#fd971f;">--with-http_ssl_module </span><span style="color:#f8f8f2;">\
</span><span style="font-style:italic;color:#fd971f;">--with-http_sub_module </span><span style="color:#f8f8f2;">\
</span><span style="font-style:italic;color:#fd971f;">--with-http_gzip_static_module </span><span style="color:#f8f8f2;">\
</span><span style="font-style:italic;color:#fd971f;">--with-http_gunzip_module </span><span style="color:#f8f8f2;">\
</span><span style="font-style:italic;color:#fd971f;">--with-stream </span><span style="color:#f8f8f2;">\
</span><span style="color:#f8f8f2;">
</span></pre>
<p>执行configure后的输出结果</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">Configuration summary
</span><span style="color:#f8f8f2;">  + using PCRE library: ../pcre-8.40
</span><span style="color:#f8f8f2;">  + using OpenSSL library: ../openssl-1.1.0g
</span><span style="color:#f8f8f2;">  + using zlib library: ../zlib-1.2.11
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">  nginx path prefix: &quot;/usr/local/nginx&quot;
</span><span style="color:#f8f8f2;">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;
</span><span style="color:#f8f8f2;">  nginx modules path: &quot;/usr/local/nginx/modules&quot;
</span><span style="color:#f8f8f2;">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;
</span><span style="color:#f8f8f2;">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;
</span><span style="color:#f8f8f2;">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;
</span><span style="color:#f8f8f2;">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;
</span><span style="color:#f8f8f2;">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;
</span><span style="color:#f8f8f2;">  nginx http client request body temporary files: &quot;client_body_temp&quot;
</span><span style="color:#f8f8f2;">  nginx http proxy temporary files: &quot;proxy_temp&quot;
</span><span style="color:#f8f8f2;">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;
</span><span style="color:#f8f8f2;">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;
</span><span style="color:#f8f8f2;">  nginx http scgi temporary files: “scgi_temp&quot;
</span></pre>
<p>确认没什么问题后开始make, 如果看到“Error”, 说明安装失败</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">make </span><span style="color:#f92672;">&amp;&amp; </span><span style="color:#f8f8f2;">make install
</span></pre>
<p>查看下/usr/local/nginx目录，<code>sslkey</code>目录是我自己创建的，用于存放ssl证书</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">ll /usr/local/nginx
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">总用量 40
</span><span style="color:#f8f8f2;">drwx------ 2 nobody root 4096 3月  27 10:39 client_body_temp
</span><span style="color:#f8f8f2;">drwxr-xr-x 2 root   root 4096 3月  28 17:50 conf
</span><span style="color:#f8f8f2;">drwx------ 2 nobody root 4096 3月  23 14:46 fastcgi_temp
</span><span style="color:#f8f8f2;">drwxr-xr-x 2 root   root 4096 3月  23 14:43 html
</span><span style="color:#f8f8f2;">drwxr-xr-x 2 root   root 4096 3月  26 18:58 logs
</span><span style="color:#f8f8f2;">drwx------ 2 nobody root 4096 3月  23 14:46 proxy_temp
</span><span style="color:#f8f8f2;">drwxr-xr-x 2 root   root 4096 3月  23 14:43 sbin
</span><span style="color:#f8f8f2;">drwx------ 2 nobody root 4096 3月  23 14:46 scgi_temp
</span><span style="color:#f8f8f2;">drwxr-xr-x 2 root   root 4096 3月  26 14:45 sslkey
</span><span style="color:#f8f8f2;">drwx------ 2 nobody root 4096 3月  23 14:46 uwsgi_temp
</span><span style="color:#f8f8f2;">
</span></pre>
<h3 id="添加软连接" class="toc-item group scroll-mt-20">
    添加软连接
    <a href="#添加软连接" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>如果你指定了<code>--sbin-path</code>，这步可选。</p>
<p>由于configure时没有指定<code>--sbin-path</code>, 因此nginx可执行文件默认路径为<code>prefix/sbin/nginx</code>，即<code>/usr/local/nginx/sbin/nginx</code>。因此为了便于使用，给nginx可执行文件加个软连接，这样就不必用全路径来使用nginx命令。</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/nginx
</span></pre>
<h2 id="安装redis" class="toc-item group scroll-mt-20">
    安装redis
    <a href="#安装redis" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><h3 id="安装gcc" class="toc-item group scroll-mt-20">
    安装gcc
    <a href="#安装gcc" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#f8f8f2;">yum install gcc
</span></pre>
<h3 id="解压" class="toc-item group scroll-mt-20">
    解压
    <a href="#解压" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#66d9ef;">cd</span><span style="color:#f8f8f2;"> /usr/local/src
</span><span style="color:#f8f8f2;">tar zxvf redis-3.2.11.tar.gz
</span></pre>
<h3 id="编译" class="toc-item group scroll-mt-20">
    编译
    <a href="#编译" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#66d9ef;">cd</span><span style="color:#f8f8f2;"> redis-3.2.11
</span><span style="color:#f8f8f2;">make MALLOC=libc </span><span style="color:#75715e;"># 如果已安装jemalloc，直接执行make
</span><span style="color:#f8f8f2;">make install
</span></pre>
<p>这里注意<code>make</code>时指定了<code>MALLOC</code>参数，因为redis默认的内存管理策略是<code>jemalloc</code>, 如果没有装这个，请改成<code>libc</code>.</p>
<h3 id="安装及初始化配置" class="toc-item group scroll-mt-20">
    安装及初始化配置
    <a href="#安装及初始化配置" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#66d9ef;">cd</span><span style="color:#f8f8f2;"> utils </span><span style="color:#75715e;"># 进入redis源码中的utils目录
</span><span style="color:#f8f8f2;">./install_server.sh </span><span style="color:#75715e;">#执行后会有交互性提示，让你选择路径配置文件路径及端口等，如下
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">This script will help you easily set up a running redis server
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">Please select the redis port for this instance: </span><span style="color:#f92672;">[</span><span style="color:#f8f8f2;">6379</span><span style="color:#f92672;">]
</span><span style="color:#f8f8f2;">Selecting default: 6379
</span><span style="color:#f8f8f2;">Please select the redis config file name </span><span style="color:#f92672;">[</span><span style="color:#f8f8f2;">/etc/redis/6379.conf</span><span style="color:#f92672;">]</span><span style="color:#f8f8f2;"> /usr/local/redis/6379.conf
</span><span style="color:#f8f8f2;">Please select the redis log file name </span><span style="color:#f92672;">[</span><span style="color:#f8f8f2;">/var/log/redis_6379.log</span><span style="color:#f92672;">]</span><span style="color:#f8f8f2;"> /usr/local/redis/log/6379.log
</span><span style="color:#f8f8f2;">Please select the data directory for this instance </span><span style="color:#f92672;">[</span><span style="color:#f8f8f2;">/var/lib/redis/6379</span><span style="color:#f92672;">]</span><span style="color:#f8f8f2;"> /usr/local/redis/db/6379
</span><span style="color:#f8f8f2;">Please select the redis executable path </span><span style="color:#f92672;">[</span><span style="color:#f8f8f2;">/usr/local/bin/redis</span><span style="color:#f92672;">-</span><span style="color:#f8f8f2;">server</span><span style="color:#f92672;">]
</span><span style="color:#f8f8f2;">Selected config:
</span><span style="color:#f8f8f2;">Port           : 6379
</span><span style="color:#f8f8f2;">Config file    : /usr/local/redis/6379.conf
</span><span style="color:#f8f8f2;">Log file       : /usr/local/redis/log/6379.log
</span><span style="color:#f8f8f2;">Data dir       : /usr/local/redis/db/6379
</span><span style="color:#f8f8f2;">Executable     : /usr/local/bin/redis-server
</span><span style="color:#f8f8f2;">Cli Executable : /usr/local/bin/redis-cli
</span><span style="color:#f8f8f2;">
</span></pre>
<p>查看下redis的安装目录</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">ll /usr/local/redis/
</span><span style="color:#f8f8f2;">总用量 12
</span><span style="color:#f8f8f2;">drwxr-xr-x 2 root root 4096 3月  26 14:37 conf
</span><span style="color:#f8f8f2;">drwxr-xr-x 3 root root 4096 3月  23 16:19 db
</span><span style="color:#f8f8f2;">drwxr-xr-x 2 root root 4096 3月  23 16:19 log
</span></pre>
<h3 id="修改绑定ip" class="toc-item group scroll-mt-20">
    修改绑定IP
    <a href="#修改绑定ip" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p><code>注：这步可以与下面的‘设置密码’一起操作，都是同一个配置文件</code></p>
<p>redis默认只会绑定本机127.0.0.1, 这样的话，访问redis服务只能通过本机的客户端连接，而无法通过远程连接，这样可以避免将redis服务暴露于危险的网络环境中，防止一些不安全的人随随便便通过远程连接到redis服务.</p>
<p>为了远程连接，把服务器的真实IP追加到bind中，假设ip为192.168.20.200, 操作如下</p>
<pre style="background-color:#272822;">
<span style="color:#75715e;"># 编辑配置文件
</span><span style="color:#f8f8f2;">vi /usr/local/redis/conf/6379.conf 
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;"># 查找bind的配置，如下
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;">################################## NETWORK #####################################
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;"># By default, if no &quot;bind&quot; configuration directive is specified, Redis listens
</span><span style="color:#75715e;"># for connections from all the network interfaces available on the server.
</span><span style="color:#75715e;"># It is possible to listen to just one or multiple selected interfaces using
</span><span style="color:#75715e;"># the &quot;bind&quot; configuration directive, followed by one or more IP addresses.
</span><span style="color:#75715e;">#
</span><span style="color:#75715e;"># Examples:
</span><span style="color:#75715e;">#
</span><span style="color:#75715e;"># bind 192.168.1.100 10.0.0.1
</span><span style="color:#75715e;"># bind 127.0.0.1 ::1
</span><span style="color:#75715e;">#
</span><span style="color:#75715e;"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the
</span><span style="color:#75715e;"># internet, binding to all the interfaces is dangerous and will expose the
</span><span style="color:#75715e;"># instance to everybody on the internet. So by default we uncomment the
</span><span style="color:#75715e;"># following bind directive, that will force Redis to listen only into
</span><span style="color:#75715e;"># the IPv4 lookback interface address (this means Redis will be able to
</span><span style="color:#75715e;"># accept connections only from clients running into the same computer it
</span><span style="color:#75715e;"># is running).
</span><span style="color:#75715e;">#
</span><span style="color:#75715e;"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES
</span><span style="color:#75715e;"># JUST COMMENT THE FOLLOWING LINE.
</span><span style="color:#75715e;"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
</span><span style="color:#66d9ef;">bind</span><span style="color:#f8f8f2;"> 127.0.0.1 192.168.20.200
</span><span style="color:#f8f8f2;">
</span></pre>
<h2 id="设置密码" class="toc-item group scroll-mt-20">
    设置密码
    <a href="#设置密码" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>redis默认情况下，客户端连接是不需要密码的，只要ip和端口正确就可以连接。安全考虑，需设置一个密码，假设为123456，如下</p>
<pre style="background-color:#272822;">
<span style="color:#75715e;"># 编辑配置文件
</span><span style="color:#f8f8f2;">vi /usr/local/redis/conf/6379.conf 
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;"># 查找requirepass的配置，
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;">################################## SECURITY ###################################
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;"># Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other
</span><span style="color:#75715e;"># commands.  This might be useful in environments in which you do not trust
</span><span style="color:#75715e;"># others with access to the host running redis-server.
</span><span style="color:#75715e;">#
</span><span style="color:#75715e;"># This should stay commented out for backward compatibility and because most
</span><span style="color:#75715e;"># people do not need auth (e.g. they run their own servers).
</span><span style="color:#75715e;">#
</span><span style="color:#75715e;"># Warning: since Redis is pretty fast an outside user can try up to
</span><span style="color:#75715e;"># 150k passwords per second against a good box. This means that you should
</span><span style="color:#75715e;"># use a very strong password otherwise it will be very easy to break.
</span><span style="color:#75715e;">#
</span><span style="color:#f8f8f2;">requirepass 123456
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;"># Command renaming.
</span><span style="color:#f8f8f2;">
</span></pre>
<h3 id="启动与停止" class="toc-item group scroll-mt-20">
    启动与停止
    <a href="#启动与停止" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>redis的可执行文件默认是在<code>/usr/local/bin</code>中，因此可以直接使用</p>
<pre style="background-color:#272822;">
<span style="color:#75715e;"># 启动
</span><span style="color:#f8f8f2;">redis-server /usr/local/redis/conf/6379.conf
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;"># 停止
</span><span style="color:#f8f8f2;">redis-cli shutdown 
</span><span style="color:#75715e;"># 或直接kill
</span><span style="color:#66d9ef;">kill</span><span style="color:#f8f8f2;"> -9 redis的pid
</span></pre>
<h2 id="安装java" class="toc-item group scroll-mt-20">
    安装java
    <a href="#安装java" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><h3 id="卸载系统自带的openjdk" class="toc-item group scroll-mt-20">
    卸载系统自带的openjdk
    <a href="#卸载系统自带的openjdk" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#75715e;"># 看下系统自带的java版本
</span><span style="color:#f8f8f2;">java</span><span style="font-style:italic;color:#fd971f;"> -version
</span><span style="color:#75715e;"># 输出如下
</span><span style="color:#f8f8f2;">openjdk version </span><span style="color:#e6db74;">&quot;1.8.0_161&quot;
</span><span style="color:#f8f8f2;">OpenJDK Runtime Environment (build 1.8.0_161-b14)
</span><span style="color:#f8f8f2;">OpenJDK 64-Bit Server VM (build 25.161-b14, mixed mode)
</span><span style="color:#75715e;"># 查看系统自带的java路径
</span><span style="color:#f8f8f2;">rpm</span><span style="font-style:italic;color:#fd971f;"> -qa </span><span style="color:#f92672;">| </span><span style="color:#f8f8f2;">grep java
</span><span style="color:#75715e;"># 输出如下
</span><span style="color:#f8f8f2;">java-1.6.0-openjdk-1.6.0.41-1.13.13.1.el6_8.x86_64
</span><span style="color:#f8f8f2;">tzdata-java-2018c-1.el6.noarch
</span><span style="color:#f8f8f2;">java-1.7.0-openjdk-1.7.0.171-2.6.13.0.el6_9.x86_64
</span><span style="color:#75715e;"># java开头的openjdk都卸载
</span><span style="color:#f8f8f2;">yum</span><span style="font-style:italic;color:#fd971f;"> -y</span><span style="color:#f8f8f2;"> remove java-1.6.0-openjdk-1.6.0.41-1.13.13.1.el6_8.x86_64
</span><span style="color:#f8f8f2;">yum</span><span style="font-style:italic;color:#fd971f;"> -y</span><span style="color:#f8f8f2;"> remove java-1.7.0-openjdk-1.7.0.171-2.6.13.0.el6_9.x86_64
</span></pre>
<h3 id="解压" class="toc-item group scroll-mt-20">
    解压
    <a href="#解压" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#75715e;"># 解压到/opt目录
</span><span style="color:#f8f8f2;">tar zxvf jdk-8u131-linux-x64.tar.gz</span><span style="font-style:italic;color:#fd971f;"> -C</span><span style="color:#f8f8f2;"> /opt
</span></pre>
<h3 id="设置环境变量" class="toc-item group scroll-mt-20">
    设置环境变量
    <a href="#设置环境变量" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#75715e;">#编辑当前用户主目录下的`.bash_profile`文件
</span><span style="color:#f8f8f2;">vi ~/.bash_profile
</span></pre>
<p>修改后如下, 没加<code>CLASS_PATH</code>,有需要自己添加下</p>
<pre style="background-color:#272822;">
<span style="color:#75715e;"># .bash_profile
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;"># Get the aliases and functions
</span><span style="color:#f92672;">if </span><span style="color:#66d9ef;">[ </span><span style="font-style:italic;color:#fd971f;">-f </span><span style="color:#f8f8f2;">~/.bashrc </span><span style="color:#66d9ef;">]</span><span style="color:#f92672;">; then
</span><span style="color:#f8f8f2;">	</span><span style="color:#66d9ef;">. </span><span style="color:#f8f8f2;">~/.bashrc
</span><span style="color:#f92672;">fi
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;"># User specific environment and startup programs
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">PATH</span><span style="color:#f92672;">=</span><span style="color:#e6db74;">$PATH:$HOME/bin
</span><span style="color:#f8f8f2;">
</span><span style="color:#f92672;">export </span><span style="color:#f8f8f2;">JAVA_HOME</span><span style="color:#f92672;">=</span><span style="color:#e6db74;">/opt/jdk1.8.0_131
</span><span style="color:#f8f8f2;">
</span><span style="color:#f92672;">export </span><span style="color:#f8f8f2;">PATH</span><span style="color:#f92672;">=</span><span style="color:#e6db74;">&quot;$PATH:$JAVA_HOME/bin/&quot;
</span><span style="color:#f8f8f2;">
</span></pre>
<p>重新加载<code>.bash_profile</code></p>
<pre style="background-color:#272822;">
<span style="color:#66d9ef;">source </span><span style="color:#f8f8f2;">~/.bash_profile
</span></pre>
<p>查看当前java版本及路径</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">java</span><span style="font-style:italic;color:#fd971f;"> -version
</span><span style="color:#75715e;"># 输出如下
</span><span style="color:#f8f8f2;">java version </span><span style="color:#e6db74;">&quot;1.8.0_131&quot;
</span><span style="color:#f8f8f2;">Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
</span><span style="color:#f8f8f2;">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">which java
</span><span style="color:#75715e;"># 输出如下
</span><span style="color:#f8f8f2;">/opt/jdk1.8.0_131/bin/java
</span><span style="color:#f8f8f2;">
</span></pre>
<h3 id="修改jce" class="toc-item group scroll-mt-20">
    修改JCE
    <a href="#修改jce" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>因为某些国家的进口管制限制，Java发布的运行环境包中的加解密有一定的限制。比如默认不允许256位密钥的AES加解密，解决方法就是修改策略文件。</p>
<p>解压,可以看到local_policy.jar和US_export_policy.jar以及readme.txt。 </p>
<ul>
<li>
<p>如果安装了JRE，将两个jar文件放到%JRE_HOME%\lib\security下覆盖原来文件，记得先备份。 </p>
</li>
<li>
<p>如果安装了JDK，将两个jar文件也放到%JAVA_HOME%\jre\lib\security下</p>
</li>
</ul>
<h2 id="安装zookeeper" class="toc-item group scroll-mt-20">
    安装zookeeper
    <a href="#安装zookeeper" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p><code>安装之前，先先确保java命令可用，因为zookeeper依赖java.</code></p>
<p>如果zookeeper单独安装在一台服务器上，为了方便，我直接用系统自带的openjdk，没用oracle jdk。</p>
<h3 id="解压" class="toc-item group scroll-mt-20">
    解压
    <a href="#解压" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#75715e;"># 解压到/opt
</span><span style="color:#f8f8f2;">tar zxvf zookeeper-3.4.10.tar.gz</span><span style="font-style:italic;color:#fd971f;"> -C</span><span style="color:#f8f8f2;"> /opt
</span></pre>
<h3 id="添加配置文件zoo.cfg" class="toc-item group scroll-mt-20">
    添加配置文件zoo.cfg
    <a href="#添加配置文件zoo.cfg" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#66d9ef;">cd</span><span style="color:#f8f8f2;"> /opt/zookeeper-3.4.10/conf
</span><span style="color:#75715e;"># 从示例文件复制
</span><span style="color:#f8f8f2;">cp zoo_sample.cfg zoo.cfg
</span><span style="color:#75715e;"># 修改配置
</span><span style="color:#f8f8f2;">vi zoo.cfg
</span></pre>
<h3 id="修改数据存储路径" class="toc-item group scroll-mt-20">
    修改数据存储路径
    <a href="#修改数据存储路径" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>查找<code>dataDir</code>,修改如下</p>
<pre style="background-color:#272822;">
<span style="color:#75715e;"># the directory where the snapshot is stored.
</span><span style="color:#75715e;"># do not use /tmp for storage, /tmp here is just
</span><span style="color:#75715e;"># example sakes.
</span><span style="color:#f8f8f2;">dataDir</span><span style="color:#f92672;">=</span><span style="color:#e6db74;">/opt/zookeeper-3.4.10/snapshot
</span><span style="color:#f8f8f2;">
</span></pre>
<h3 id="启动/停止/重启" class="toc-item group scroll-mt-20">
    启动/停止/重启
    <a href="#启动/停止/重启" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#f8f8f2;">zkServer.sh start
</span><span style="color:#f8f8f2;">zkServer.sh stop
</span><span style="color:#f8f8f2;">zkServer.sh restart
</span></pre>
<h3 id="客户端连接" class="toc-item group scroll-mt-20">
    客户端连接
    <a href="#客户端连接" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#75715e;"># 连接zk服务端，如果是远程连接，请换成远程服务器ip
</span><span style="color:#f8f8f2;">zkCli.sh</span><span style="font-style:italic;color:#fd971f;"> -server</span><span style="color:#f8f8f2;"> 127.0.0.1:2181
</span><span style="color:#75715e;"># 输出如下
</span><span style="color:#f8f8f2;">Connecting to 127.0.0.1:2181
</span><span style="color:#f8f8f2;">2018-03-29 15:45:11,977 </span><span style="color:#f92672;">[</span><span style="color:#f8f8f2;">myid:</span><span style="color:#f92672;">]</span><span style="color:#f8f8f2;"> - INFO  </span><span style="color:#f92672;">[</span><span style="color:#f8f8f2;">main:Environment@100</span><span style="color:#f92672;">]</span><span style="color:#f8f8f2;"> - Client environment:zookeeper.version=3.4.10-39d3a4f269333c922ed3db283be479f9deacaa0f, built on 03/23/2017 10:13 GMT
</span><span style="color:#f8f8f2;">2018-03-29 15:45:11,980 </span><span style="color:#f92672;">[</span><span style="color:#f8f8f2;">myid:</span><span style="color:#f92672;">]</span><span style="color:#f8f8f2;"> - INFO  </span><span style="color:#f92672;">[</span><span style="color:#f8f8f2;">main:Environment@100</span><span style="color:#f92672;">]</span><span style="color:#f8f8f2;"> - Client environment:host.name=localhost
</span><span style="color:#f8f8f2;">...
</span><span style="color:#f8f8f2;">...
</span><span style="color:#f8f8f2;">[zk: 127.0.0.1:2181(CONNECTED) 0]
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;"># 查看根节点
</span><span style="color:#f8f8f2;">[zk: 127.0.0.1:2181(CONNECTED) 1] ls /
</span><span style="color:#f8f8f2;">[dealer, dubbo, zookeeper]
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;"># 查看根节点信息
</span><span style="color:#f8f8f2;">[zk: 127.0.0.1:2181(CONNECTED) 4] ls2 /
</span><span style="color:#f8f8f2;">[dealer, dubbo, zookeeper]
</span><span style="color:#f8f8f2;">cZxid = 0x0
</span><span style="color:#f8f8f2;">ctime = Thu Jan 01 08:00:00 CST 1970
</span><span style="color:#f8f8f2;">mZxid = 0x0
</span><span style="color:#f8f8f2;">mtime = Thu Jan 01 08:00:00 CST 1970
</span><span style="color:#f8f8f2;">pZxid = 0x2d
</span><span style="color:#f8f8f2;">cversion = 1
</span><span style="color:#f8f8f2;">dataVersion = 0
</span><span style="color:#f8f8f2;">aclVersion = 0
</span><span style="color:#f8f8f2;">ephemeralOwner = 0x0
</span><span style="color:#f8f8f2;">dataLength = 0
</span><span style="color:#f8f8f2;">numChildren = 3
</span><span style="color:#f8f8f2;">
</span><span style="color:#75715e;"># 退出
</span><span style="color:#f8f8f2;">[zk: 127.0.0.1:2181(CONNECTED) 5] quit
</span></pre>
<h2 id="防火墙iptables修改" class="toc-item group scroll-mt-20">
    防火墙iptables修改
    <a href="#防火墙iptables修改" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>开启防火墙后，有些软件的端口是无法访问，需要自己手动添加端口控制</p>
<h3 id="配置文件路径" class="toc-item group scroll-mt-20">
    配置文件路径
    <a href="#配置文件路径" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p><code>/etc/sysconfig/iptables</code></p>
<h3 id="添加常用端口控制" class="toc-item group scroll-mt-20">
    添加常用端口控制
    <a href="#添加常用端口控制" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#f8f8f2;">vi /etc/sysconfig/iptables
</span></pre>
<p>比如要开放6379,2181端口, 修改如下</p>
<pre style="background-color:#272822;">
<span style="color:#75715e;"># Firewall configuration written by system-config-firewall
</span><span style="color:#75715e;"># Manual customization of this file is not recommended.
</span><span style="color:#f8f8f2;">*filter
</span><span style="color:#f8f8f2;">:INPUT ACCEPT </span><span style="color:#f92672;">[</span><span style="color:#f8f8f2;">0:0</span><span style="color:#f92672;">]
</span><span style="color:#f8f8f2;">:FORWARD ACCEPT </span><span style="color:#f92672;">[</span><span style="color:#f8f8f2;">0:0</span><span style="color:#f92672;">]
</span><span style="color:#f8f8f2;">:OUTPUT ACCEPT </span><span style="color:#f92672;">[</span><span style="color:#f8f8f2;">0:0</span><span style="color:#f92672;">]
</span><span style="color:#f8f8f2;">-A INPUT</span><span style="font-style:italic;color:#fd971f;"> -p</span><span style="color:#f8f8f2;"> tcp</span><span style="font-style:italic;color:#fd971f;"> -m</span><span style="color:#f8f8f2;"> tcp</span><span style="font-style:italic;color:#fd971f;"> --dport</span><span style="color:#f8f8f2;"> 6379</span><span style="font-style:italic;color:#fd971f;"> -j</span><span style="color:#f8f8f2;"> ACCEPT </span><span style="color:#75715e;"># 这是我添加的
</span><span style="color:#f8f8f2;">-A INPUT</span><span style="font-style:italic;color:#fd971f;"> -p</span><span style="color:#f8f8f2;"> tcp</span><span style="font-style:italic;color:#fd971f;"> -m</span><span style="color:#f8f8f2;"> tcp</span><span style="font-style:italic;color:#fd971f;"> --dport</span><span style="color:#f8f8f2;"> 2181</span><span style="font-style:italic;color:#fd971f;"> -j</span><span style="color:#f8f8f2;"> ACCEPT </span><span style="color:#75715e;"># 这是我添加的
</span><span style="color:#f8f8f2;">-A INPUT</span><span style="font-style:italic;color:#fd971f;"> -m</span><span style="color:#f8f8f2;"> state</span><span style="font-style:italic;color:#fd971f;"> --state</span><span style="color:#f8f8f2;"> ESTABLISHED,RELATED</span><span style="font-style:italic;color:#fd971f;"> -j</span><span style="color:#f8f8f2;"> ACCEPT
</span><span style="color:#f8f8f2;">-A INPUT</span><span style="font-style:italic;color:#fd971f;"> -p</span><span style="color:#f8f8f2;"> icmp</span><span style="font-style:italic;color:#fd971f;"> -j</span><span style="color:#f8f8f2;"> ACCEPT
</span><span style="color:#f8f8f2;">-A INPUT</span><span style="font-style:italic;color:#fd971f;"> -i</span><span style="color:#f8f8f2;"> lo</span><span style="font-style:italic;color:#fd971f;"> -j</span><span style="color:#f8f8f2;"> ACCEPT
</span><span style="color:#f8f8f2;">-A INPUT</span><span style="font-style:italic;color:#fd971f;"> -m</span><span style="color:#f8f8f2;"> state</span><span style="font-style:italic;color:#fd971f;"> --state</span><span style="color:#f8f8f2;"> NEW</span><span style="font-style:italic;color:#fd971f;"> -m</span><span style="color:#f8f8f2;"> tcp</span><span style="font-style:italic;color:#fd971f;"> -p</span><span style="color:#f8f8f2;"> tcp</span><span style="font-style:italic;color:#fd971f;"> -s</span><span style="color:#f8f8f2;"> 10.0.0.0/8</span><span style="font-style:italic;color:#fd971f;"> --dport</span><span style="color:#f8f8f2;"> 22</span><span style="font-style:italic;color:#fd971f;"> -j</span><span style="color:#f8f8f2;"> ACCEPT
</span><span style="color:#f8f8f2;">-A INPUT</span><span style="font-style:italic;color:#fd971f;"> -s</span><span style="color:#f8f8f2;"> 10.10.32.0/24</span><span style="font-style:italic;color:#fd971f;"> -j</span><span style="color:#f8f8f2;"> ACCEPT
</span><span style="color:#f8f8f2;">-A INPUT</span><span style="font-style:italic;color:#fd971f;"> -s</span><span style="color:#f8f8f2;"> 10.10.21.0/24</span><span style="font-style:italic;color:#fd971f;"> -j</span><span style="color:#f8f8f2;"> ACCEPT
</span><span style="color:#f8f8f2;">-A INPUT</span><span style="font-style:italic;color:#fd971f;"> -j</span><span style="color:#f8f8f2;"> REJECT</span><span style="font-style:italic;color:#fd971f;"> --reject-with</span><span style="color:#f8f8f2;"> icmp-host-prohibited
</span><span style="color:#f8f8f2;">-A FORWARD</span><span style="font-style:italic;color:#fd971f;"> -j</span><span style="color:#f8f8f2;"> REJECT</span><span style="font-style:italic;color:#fd971f;"> --reject-with</span><span style="color:#f8f8f2;"> icmp-host-prohibited
</span><span style="color:#f8f8f2;">COMMIT
</span></pre>
<p>重启防火墙就可以生效</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">service iptables restart
</span></pre>
<h3 id="常用命令" class="toc-item group scroll-mt-20">
    常用命令
    <a href="#常用命令" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3><pre style="background-color:#272822;">
<span style="color:#75715e;">#启用
</span><span style="color:#f8f8f2;">service iptables start
</span><span style="color:#75715e;">#停止
</span><span style="color:#f8f8f2;">service iptables stop
</span><span style="color:#75715e;">#重启
</span><span style="color:#f8f8f2;">service iptables restart
</span></pre>
<p>查看状态</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">service iptables status
</span><span style="color:#75715e;"># 输出如下
</span><span style="color:#f8f8f2;">Table: filter
</span><span style="color:#f8f8f2;">Chain INPUT (policy ACCEPT)
</span><span style="color:#f8f8f2;">num  target     prot opt source               destination
</span><span style="color:#f8f8f2;">1    ACCEPT     tcp</span><span style="color:#f92672;">  --</span><span style="color:#f8f8f2;">  0.0.0.0/0            0.0.0.0/0           tcp dpt:6379
</span><span style="color:#f8f8f2;">2    ACCEPT     tcp</span><span style="color:#f92672;">  --</span><span style="color:#f8f8f2;">  0.0.0.0/0            0.0.0.0/0           tcp dpt:2181
</span><span style="color:#f8f8f2;">3    ACCEPT     all</span><span style="color:#f92672;">  --</span><span style="color:#f8f8f2;">  0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED
</span><span style="color:#f8f8f2;">4    ACCEPT     icmp</span><span style="color:#f92672;"> --</span><span style="color:#f8f8f2;">  0.0.0.0/0            0.0.0.0/0
</span><span style="color:#f8f8f2;">5    ACCEPT     all</span><span style="color:#f92672;">  --</span><span style="color:#f8f8f2;">  0.0.0.0/0            0.0.0.0/0
</span><span style="color:#f8f8f2;">6    ACCEPT     tcp</span><span style="color:#f92672;">  --</span><span style="color:#f8f8f2;">  10.0.0.0/8           0.0.0.0/0           state NEW tcp dpt:22
</span><span style="color:#f8f8f2;">7    ACCEPT     all</span><span style="color:#f92672;">  --</span><span style="color:#f8f8f2;">  10.10.32.0/24        0.0.0.0/0
</span><span style="color:#f8f8f2;">8    ACCEPT     all</span><span style="color:#f92672;">  --</span><span style="color:#f8f8f2;">  10.10.21.0/24        0.0.0.0/0
</span><span style="color:#f8f8f2;">9    REJECT     all</span><span style="color:#f92672;">  --</span><span style="color:#f8f8f2;">  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited
</span></pre>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    <entry>
        <title>logrotate 日志轮转配置文档</title>
        <link rel="alternate" href="/knowledge/linux/logrotate_usage" type="text/html" title="logrotate 日志轮转配置文档" />
        <published>2018-03-19T00:00:00+00:00</published>
        <updated>2018-03-19T00:00:00+00:00</updated>
        <id>/knowledge/linux/logrotate_usage</id>
        <content type="html" xml:base="/knowledge/linux/logrotate_usage">
            <![CDATA[<p>from http://blog.163.com/bull_linux/blog/static/2138811422013101334544349/</p>
<h2 id="基本用法" class="toc-item group scroll-mt-20">
    基本用法
    <a href="#基本用法" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<ul>
<li>
<p>使用：
logrotate CONF_FILE+</p>
</li>
<li>
<p>描述：
可自动轮转，压缩，删除，邮寄日志文件。可每天，每周，每月或日志文件达到一定大小时进行操作。</p>
<p>通常logrotate是一个每天的cron计划，一般不会在一天内多次修改日志，除非轮转是基于日志大小的，
或者logrotate被多次运行，使用了-f(–force)项。</p>
<p>命令行上可指定任何多个配置文件。
后面的配置会覆盖前面的配置，所以配置文件的加载顺序很重要。
通常需要在一个配置文件中include其他配置文件，具体参见include指令用法。
如果在命令行上给出了一个目录，那么该目录下所有文件都将被用作配置文件。</p>
<p>如果没有参数，logrotate就打印版本等信息。如果在轮转日志时发生错误，会以非0状态退出。</p>
</li>
<li>
<p>选项：</p>
</li>
</ul>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">   -d    debug模式，隐含-v，不会对日志文件做实际操作
</span></pre>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">   -f, --force
</span></pre>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">       强制轮转日志
</span></pre>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">   -m, --mail &lt;command&gt;
</span></pre>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">       邮寄日志时使用的命令
</span></pre>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">   -s, --state &lt;statefile&gt;
</span></pre>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">       指定另一个state文件
</span></pre>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">   --usage
</span></pre>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">       打印帮助
</span></pre>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">   -v, --verbose
</span></pre>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">       详细信息
</span></pre>
<p>配置文件
logrotate会读取每一个配置文件，配置文件中可对global和具体log文件配置。
本地配置(log文件配置)覆盖global配置，后来的配置覆盖先前的配置。</p>
<h2 id="示例" class="toc-item group scroll-mt-20">
    示例
    <a href="#示例" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><pre style="background-color:#272822;">
<span style="color:#f8f8f2;">       </span><span style="color:#75715e;"># sample logrotate configuration file            注释行
</span><span style="color:#f8f8f2;">       compress                            轮转后进行压缩
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">       /var/log/messages {                 指定日志文件路径
</span><span style="color:#f8f8f2;">           rotate 5                        保留5个轮转文件
</span><span style="color:#f8f8f2;">           weekly                          每周轮转
</span><span style="color:#f8f8f2;">           postrotate                      轮转之后执行的命令(在压缩旧日志之前)
</span><span style="color:#f8f8f2;">               /usr/bin/killall -HUP syslogd
</span><span style="color:#f8f8f2;">           endscript
</span><span style="color:#f8f8f2;">       }
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">       /usr/local/nginx/logs/*.log {       nginx日志文件
</span><span style="color:#f8f8f2;">            daily
</span><span style="color:#f8f8f2;">            rotate 5
</span><span style="color:#f8f8f2;">            missingok
</span><span style="color:#f8f8f2;">            dateext
</span><span style="color:#f8f8f2;">            compress
</span><span style="color:#f8f8f2;">            delaycompress
</span><span style="color:#f8f8f2;">            notifempty
</span><span style="color:#f8f8f2;">            sharedscripts
</span><span style="color:#f8f8f2;">            postrotate
</span><span style="color:#f8f8f2;">                if </span><span style="color:#f92672;">[ -</span><span style="color:#f8f8f2;">f /usr/local/nginx/logs/nginx.pid </span><span style="color:#f92672;">]</span><span style="color:#f8f8f2;">; then
</span><span style="color:#f8f8f2;">                    kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`
</span><span style="color:#f8f8f2;">                fi
</span><span style="color:#f8f8f2;">            endscript
</span><span style="color:#f8f8f2;">        }
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">       </span><span style="color:#e6db74;">&quot;/var/log/httpd/access.log&quot;</span><span style="color:#f8f8f2;"> /var/log/httpd/error.log {  指定了两个日志文件
</span><span style="color:#f8f8f2;">                                                               文件名中有空格
</span><span style="color:#f8f8f2;">                                                               要用</span><span style="color:#e6db74;">&quot;支持&#39; &quot; </span><span style="color:#ae81ff;">\的</span><span style="color:#f8f8f2;">shell引用规则字符
</span><span style="color:#f8f8f2;">           rotate 5                        保留5个轮转文件
</span><span style="color:#f8f8f2;">           mail www@my.org                 解压后邮寄超过5次轮转的老日志文件，而不是删除
</span><span style="color:#f8f8f2;">           size 100k                       日志文件达到100K时就进行轮转
</span><span style="color:#f8f8f2;">           sharedscripts                   表示postrotate脚本在压缩了日志之后只执行一次
</span><span style="color:#f8f8f2;">           postrotate
</span><span style="color:#f8f8f2;">               /usr/bin/killall -HUP httpd
</span><span style="color:#f8f8f2;">           endscript
</span><span style="color:#f8f8f2;">       }
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">       /var/log/news/* {            所有/var/log/news/下的文件
</span><span style="color:#f8f8f2;">                                    通配符</span><span style="color:#f92672;">*</span><span style="color:#f8f8f2;">，会轮转包括之前轮转的文件，需要olddir指令
</span><span style="color:#f8f8f2;">                                    或者</span><span style="color:#f92672;">*</span><span style="color:#f8f8f2;">.log来指定只有.log后缀的文件
</span><span style="color:#f8f8f2;">           monthly                  每月轮转
</span><span style="color:#f8f8f2;">           rotate 2                
</span><span style="color:#f8f8f2;">           olddir /var/log/news/old 配合指定文件时的</span><span style="color:#f92672;">*</span><span style="color:#f8f8f2;">通配符使用
</span><span style="color:#f8f8f2;">           missingok                如果指定的目录不存在，logrotate会报错，此项用来关闭报错
</span><span style="color:#f8f8f2;">           postrotate
</span><span style="color:#f8f8f2;">               kill -HUP `cat /var/run/inn.pid`
</span><span style="color:#f8f8f2;">           endscript
</span><span style="color:#f8f8f2;">           nocompress               不压缩
</span><span style="color:#f8f8f2;">       }
</span></pre>
<p>=====================================================</p>
<h2 id="详细选项解释" class="toc-item group scroll-mt-20">
    详细选项解释
    <a href="#详细选项解释" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<ul>
<li>
<p>rotate COUNT</p>
<p>轮转COUNT次，也就是最多保留COUNT个轮转备份。
超出的被删除或邮寄。
设置为0，则不保存轮转的老日志。</p>
</li>
<li>
<p>start COUNT</p>
<p>轮转文件名基于这个数字。
例如，指定0时，原日志文件轮转的备份文件以.0为扩展名，如果指定9，就直接从.9开始跳过0-8
然后再继续向后轮转rotate指定的次数。</p>
</li>
<li>
<p>compress</p>
<p>默认使用gzip压缩老日志</p>
</li>
<li>
<p>nocompress</p>
<p>不压缩老日志</p>
</li>
<li>
<p>compresscmd</p>
<p>指定压缩命令，默认gzip</p>
</li>
<li>
<p>uncompresscmd</p>
<p>指定解压命令，默认gunzip</p>
</li>
<li>
<p>compressext</p>
<p>如果启用了压缩，指定在压缩了的日志文件上使用哪个扩展。默认随配置的压缩命令</p>
</li>
<li>
<p>compressoptions</p>
<p>可以传送命令行选项给压缩程序，默认的gzip使用-9选项(最大压缩率)</p>
</li>
<li>
<p>delaycompress</p>
<p>延迟到下次轮转时压缩之前的日志文件。</p>
<p>需要与compress项连用，当程序有时不能关闭写日志文件时可使用此项。</p>
</li>
<li>
<p>nodelaycompress</p>
<p>不延迟压缩</p>
</li>
<li>
<p>copy</p>
<p>拷贝日志文件，不修改原有文件。</p>
<p>给当前日志文件做快照，或其他工具需要截断或解析文件时，可使用此项</p>
<p>使用此项时，create项就没用了，因为老日志文件占着位置</p>
</li>
<li>
<p>nocopy</p>
<p>留下原日志文件而不复制</p>
</li>
<li>
<p>copytruncate</p>
<p>在创建了拷贝后截断原日志文件到0大小，而不是用移动就日志文件再创建新文件的方法。</p>
<p>可用于日志一些程序不关闭日志文件一直写的情况。</p>
<p>注意，在拷贝文件和截断文件时有一个非常小的时间片，所以可能会丢失日志信息。</p>
<p>使用此项时，create无效</p>
</li>
<li>
<p>nocopytruncate</p>
<p>创建拷贝后不截断原日志文件</p>
</li>
<li>
<p>create MODE OWNER GROUP</p>
<p>在轮转动作之后，postrotate脚本执行之前，立即使用刚轮转的日志文件名创建日志文件。</p>
<p>MODE 指定日志文件的权限(0660之类)</p>
<p>OWNER 指定日志文件的属主</p>
<p>GROUP 指定日志文件的属组</p>
<p>可省略任何上述属性，省略的属性从原文件继承，可使用nocreate项来关闭</p>
</li>
<li>
<p>nocreate</p>
<p>不创建新的日志文件</p>
</li>
<li>
<p>daily</p>
<p>每天轮转日志文件</p>
</li>
<li>
<p>weekly</p>
<p>如果当前的星期几比上次轮转的星期几少，或者过了一个多星期，就会发生轮转</p>
<p>通常是在每周的第一天轮转，如果logrotate不是每天运行的，会在第一次有机会时进行轮转。</p>
</li>
<li>
<p>monthly</p>
<p>一月中logrotate第一次运行时进行轮转(通常是一月的第一天)</p>
</li>
<li>
<p>yearly</p>
<p>如果当前年份不同于上次轮转的年份，则进行日志轮转</p>
</li>
<li>
<p>dateext</p>
<p>归档旧日志文件时，文件名添加YYYYMMDD形式日期，可用dateformat选项扩展配置。</p>
</li>
<li>
<p>nodateext</p>
<p>不使用dateext扩展名</p>
</li>
<li>
<p>dateformat FORMAT_STRING</p>
<p>使用strftime(3)类似的格式指定dateext的格式，只允许%Y %m %d和%s指定符。</p>
<p>默认为 -%Y%m%d</p>
<p>注意：扩展中分割日志的字符也是日期格式的一部分，系统时钟需要设置到2001-09-09之后，%s才能正确工作</p>
</li>
<li>
<p>extension EXT</p>
<p>日志文件可在轮转后使用指定的EXT扩展名。</p>
<p>如果使用压缩，通常EXT后还会加上压缩文件的扩展名，通常是.gz。</p>
<p>例如想把mylog.foo轮转为mylog.1.foo.gz而不是mylog.foo.1.gz</p>
</li>
<li>
<p>ifempty</p>
<p>默认项，即使日志是空的也进行轮转，覆盖notifempty项</p>
</li>
<li>
<p>notifempty</p>
<p>如果日志为空，则不进行轮转</p>
</li>
<li>
<p>include FILE_OR_DIRECTORY</p>
<p>读取include指令下的文件。</p>
<p>如果是目录，在继续处理包含的文件之前，按字母顺序读取目录下大部分文件(只读取普通文件)</p>
<p>目录或管道文件等，还有使用指定扩展名的文件不读取</p>
<p>用tabooext指令定义禁忌扩展名。</p>
<p>include指令不能出现在日志文件定义中。</p>
</li>
<li>
<p>tabooext [+] LIST</p>
<p>修改当前禁忌扩展名列表。</p>
<p>如果列表前使用了+，表示将LIST加到当前列表中，否则就替换当前列表。</p>
<p>默认包含：.rpmorig, .rpmsave, .v, .swp, .dpkg-dist, .dpkg-old, .dpkg-new, .disabled</p>
</li>
<li>
<p>mail ADDRESS</p>
<p>当日志轮转超过保留数时，多出的会mail到ADDRESS。</p>
<p>可在log定义中使用nomail指令来不邮寄该log</p>
</li>
<li>
<p>nomail</p>
<p>不邮寄日志</p>
</li>
<li>
<p>mailfirst</p>
<p>与mail指令连用，邮寄刚轮转的日志，而不是期满的日志(超出数量要被删除的)</p>
</li>
<li>
<p>maillast</p>
<p>默认项，与mail连用，邮寄超出rotate数量要被删除的日志。</p>
</li>
<li>
<p>maxage COUNT</p>
<p>删除COUNT天前的轮转备份。</p>
<p>只在轮转动作时检查日志文件的时间戳。</p>
<p>如果配置了maillast和mail指令，删除的轮转备份会被邮寄。</p>
</li>
<li>
<p>minsize SIZE</p>
<p>日志文件增长到超过SIZE bytes时进行轮转，但不会在额外指定的时间间隔之前(daily，weekly等)。</p>
<p>相关的size指令与其类似，但size与间隔指令互斥，不考虑时间而直接进行轮转。</p>
<p>而minsize指令要考虑大小和时间戳。</p>
</li>
<li>
<p>size SIZE</p>
<p>超过SIZE时轮转，SIZE默认单位是KB，可使用M，G来指定MB和GB。</p>
</li>
<li>
<p>shred</p>
<p>默认关闭</p>
<p>删除文件使用shred -u(销毁)而不是unlink()系统调用。</p>
<p>可确保删除日志后，文件不可读(对磁盘伤害大)。</p>
</li>
<li>
<p>shredcycles COUNT</p>
<p>调用shred在删除日志文件前覆写COUNT次，不使用此项时，就按shred默认次数覆写。</p>
</li>
<li>
<p>noshred</p>
<p>删除就文件时不使用shred</p>
</li>
<li>
<p>missingok</p>
<p>如果日志文件不存在，继续处理下一个文件而不产生报错信息。</p>
</li>
<li>
<p>nomissingok</p>
<p>默认项，如果日志文件不存在，就产生错误。</p>
</li>
<li>
<p>olddir DIRECTORY</p>
<p>轮转的日志放到DIRECTORY目录中，目录必须与日志文件在同一物理设备上，
如果没指定绝对路径，则假定该目录在与日志目录下。</p>
</li>
<li>
<p>noolddir</p>
<p>日志只在它们的当前目录中轮转。</p>
</li>
<li>
<p>sharedsctipts</p>
<p>通常prerotate和postrotate脚本为每一个轮转的日志运行，也就是说一个单独的脚本可能因为日志轮转定义
中匹配了多个文件时(例如/var/log/news/*)，该脚本会运行多次。</p>
<p>指定此项，脚本只对所有匹配的日志文件统一执行一次。</p>
<p>如果匹配的日志都不需要轮转，脚本也不会执行。</p>
<p>如果脚本错误退出，剩下的动作也不会为任何日志执行。</p>
<p>隐含create项，可被nosharedscripts覆盖。</p>
</li>
<li>
<p>nosharedscripts</p>
<p>默认项</p>
<p>为每一个轮转的日志执行prerotate和postrotate</p>
<p>如果脚本错误退出，剩下的动作只不对影响到的日志执行。</p>
</li>
<li>
<p>prerotate/endscript</p>
<p>在prerotate和endscript之间的行(他俩自己各占一行)，在日志文件被轮转之前并且有需要轮转时，才会执行。</p>
<p>该指令只能用于log文件定义中。</p>
</li>
<li>
<p>postrotate/endscript</p>
<p>在prerotate和endscript之间的行，在日志文件被轮转之后执行。</p>
<p>该指令只能用于log文件定义中。</p>
</li>
<li>
<p>firstaction/endscript</p>
<p>在firstaction和endscript之间的行，在轮转所有匹配了通配符的日志被轮转之前，
在prerotate执行之前，并且至少要有一个日志需要被轮转时，才会执行。</p>
<p>只能用于log文件定义中，如果脚本错误退出，就不再继续往下进行。</p>
</li>
<li>
<p>lastaction/endscript</p>
<p>在lastaction和endscript之间的行，在轮转了所有匹配的日志后，在postrotate执行之后，
并且至少要有一个日志被轮转了的情况下，才会执行。</p>
<p>只能用于log文件定义中，如果脚本错误退出，只显示一个错误信息作为最后的动作。</p>
</li>
</ul>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    <entry>
        <title>领域模型实例分析之-论坛发帖</title>
        <link rel="alternate" href="/knowledge/ddd/forum_post_model" type="text/html" title="领域模型实例分析之-论坛发帖" />
        <published>2017-12-26T00:00:00+00:00</published>
        <updated>2017-12-26T00:00:00+00:00</updated>
        <id>/knowledge/ddd/forum_post_model</id>
        <content type="html" xml:base="/knowledge/ddd/forum_post_model">
            <![CDATA[<p>针对 http://www.cnblogs.com/daoqidelv/p/7533067.html 的讨论</p>
<p><img src="/static/img/post_model.png" alt="post_mode" title="" loading="lazy"></p>
<p>来自 Enode QQ 群:</p>
<pre style="background-color:#272822;">
<span style="color:#f8f8f2;">上海-1976  08:26:08
</span><span style="color:#f8f8f2;">他是把发帖行为放在了用户实体里
</span><span style="color:#f8f8f2;">上海-1976  08:26:14
</span><span style="color:#f8f8f2;">为何
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:27:34
</span><span style="color:#f8f8f2;">你觉得这里不妥是吗？
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:31:27
</span><span style="color:#f8f8f2;">他这样做你觉得哪里不妥
</span><span style="color:#f8f8f2;">上海-1976  08:31:39
</span><span style="color:#f8f8f2;">应用层直接可以调用
</span><span style="color:#f8f8f2;">上海-1976  08:32:06
</span><span style="color:#f8f8f2;">不用写业务逻辑相关的
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:33:08
</span><span style="color:#f8f8f2;">那建模是面向用例的吗
</span><span style="color:#f8f8f2;">上海-1976  08:33:19
</span><span style="color:#f8f8f2;">不是
</span><span style="color:#f8f8f2;">上海-1976  08:34:07
</span><span style="color:#f8f8f2;">但是也要有业务入口
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:34:08
</span><span style="color:#f8f8f2;">用例的作用是什么
</span><span style="color:#f8f8f2;">上海-1976  08:34:46
</span><span style="color:#f8f8f2;">用户角度使用系统
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:34:52
</span><span style="color:#f8f8f2;">恩
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:35:58
</span><span style="color:#f8f8f2;">如果像他这个思路，是不是还会有replyAuthor，topicAuthor之类的。表示回复作者，主题作者
</span><span style="color:#f8f8f2;">上海-1976  08:36:01
</span><span style="color:#f8f8f2;">判断帖子长度不应该在用户实体里
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:36:36
</span><span style="color:#f8f8f2;">恩，他这条业务规则也完全可以在帖子构造函数里
</span><span style="color:#f8f8f2;">济南-肖坤  08:38:37
</span><span style="color:#f8f8f2;">Post的业务规则应该在Post里面吧
</span><span style="color:#f8f8f2;">济南-肖坤  08:39:19
</span><span style="color:#f8f8f2;">他这样分析，作者确实就太多了
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:39:31
</span><span style="color:#f8f8f2;">根本上他犯了一个错误，就是把人和系统的交互也设计进领域模型里了。这样看起来很符合主谓宾结构，实际上让模型搞的更复杂了
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">成都-句幽  08:40:29
</span><span style="color:#f8f8f2;">那 发帖 应该抽象个领域服务出来负责 帖子和作者的交互吗？
</span><span style="color:#f8f8f2;">上海 - Ivan  08:41:35
</span><span style="color:#f8f8f2;">其实作者作为帖子的创建工厂是可以的，但名字不应该用posting，用createpost就好很多了
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:42:36
</span><span style="color:#f8f8f2;">如果发帖时的业务规则帖子自己就能搞定，那不需要领域服务，如果还要支持关键字过滤，那需要引入领域服务，CreatePostService的领域服务
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:43:19
</span><span style="color:#f8f8f2;">@上海 - Ivan 对，创建帖子可以，但是posting就不行
</span><span style="color:#f8f8f2;">成都-句幽  08:43:37
</span><span style="color:#f8f8f2;">嗯
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:44:57
</span><span style="color:#f8f8f2;">不对，他是PostAuthor去posting的，所以也没问题。主要问题是不应该有PostAuthor这个东西
</span><span style="color:#f8f8f2;">上海 - Ivan  08:46:09
</span><span style="color:#f8f8f2;">他还是想成了要模拟人去发帖，改成postservice就好了
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:46:11
</span><span style="color:#f8f8f2;">人做什么，他一直是这个思维
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:47:10
</span><span style="color:#f8f8f2;">如果哪一天我的帖子不是登录用户发的，而是API调用过来的，那也是人吗
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:48:27
</span><span style="color:#f8f8f2;">他没有意识到，帖子作者的主从关系。帖子是主体，帖子有一个作者。作者是帖子我们所关心的一个信息而已。
</span><span style="color:#f8f8f2;">上海 - Ivan  08:50:09
</span><span style="color:#f8f8f2;">以人为中心设计系统，不利于职责归属划分
</span><span style="color:#f8f8f2;">上海 - Ivan  08:50:28
</span><span style="color:#f8f8f2;">应该尽量避免
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:50:36
</span><span style="color:#f8f8f2;">如果哪天，系统可以匿名发表帖子了，我不知道他要怎样设计[表情]
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:51:29
</span><span style="color:#f8f8f2;">按照他这样的思路，就没法搞了
</span><span style="color:#f8f8f2;">上海 - Ivan  08:52:21
</span><span style="color:#f8f8f2;">我主要考虑的是职责划分问题
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:54:11
</span><span style="color:#f8f8f2;">人使用系统，系统为人提供发帖的应用服务，发帖应用服务里创建帖子，帖子负责保证业务规则。
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:54:34
</span><span style="color:#f8f8f2;">作者是帖子的一个属性
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:56:32
</span><span style="color:#f8f8f2;">系统是一个边界，用来和人对应，人和系统交互
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:56:53
</span><span style="color:#f8f8f2;">系统内部使用领域模型完成用户需求
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:57:43
</span><span style="color:#f8f8f2;">领域模型容纳用户需求，抓住领域本质。
</span><span style="color:#f8f8f2;">杭州-汤雪华  08:58:36
</span><span style="color:#f8f8f2;">把杯子倒空才能装满水，这个我以前就讲过的
</span><span style="color:#f8f8f2;">杭州-汤雪华  09:00:58
</span><span style="color:#f8f8f2;">我们这些讨论如果到博客园和他讨论，应该会给他带来很多思考和冲击
</span><span style="color:#f8f8f2;">杭州-汤雪华  09:01:44
</span><span style="color:#f8f8f2;">当时我和蟋蟀就是这样讨论的，当时蟋蟀和他的思维很像
</span><span style="color:#f8f8f2;">
</span><span style="color:#f8f8f2;">上海 - Ivan  09:16:49
</span><span style="color:#f8f8f2;">我们主要考虑职责归属问题
</span><span style="color:#f8f8f2;">上海 - Ivan  09:17:02
</span><span style="color:#f8f8f2;">多问问自己,谁该为这个业务规则负责
</span><span style="color:#f8f8f2;">上海 - Ivan  09:17:56
</span><span style="color:#f8f8f2;">ddd大到bc的划分, 小到聚合,实体,值对象的划分,都能更好地识别出业务规则归属问题
</span><span style="color:#f8f8f2;">上海 - Ivan  09:19:45
</span><span style="color:#f8f8f2;">如果ooa,ood做得好,其实不谈ddd也罢
</span><span style="color:#f8f8f2;">杭州-汤雪华  09:20:38
</span><span style="color:#f8f8f2;">对
</span><span style="color:#f8f8f2;">杭州-汤雪华  09:21:07
</span><span style="color:#f8f8f2;">归根结底还是职责划分
</span><span style="color:#f8f8f2;">杭州-汤雪华  09:25:16
</span><span style="color:#f8f8f2;">功能划分简单
</span><span style="color:#f8f8f2;">杭州-汤雪华  09:26:23
</span><span style="color:#f8f8f2;">是个人都知道论坛有发帖回贴的功能，但是很多人不知道怎么设计模型
</span></pre>
]]>
        </content>

        <author>
            <name></name>
            </author>
    </entry>
    </feed>